// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: beeswax/openrtb/extension.proto

/*
	Package openrtb is a generated protocol buffer package.

	It is generated from these files:
		beeswax/openrtb/extension.proto
		beeswax/openrtb/openrtb.proto
		beeswax/openrtb/openrtb_common.proto

	It has these top-level messages:
		AdvertiserInfo
		Dimension
		BidRequestExtensions
		ImpressionExtensions
		BannerExtensions
		VideoExtensions
		NativeExtensions
		PMPExtensions
		DirectDealExtensions
		SiteExtensions
		AppExtensions
		ContentExtensions
		ProducerExtensions
		DeviceExtensions
		UserExtensions
		PublisherExtensions
		GeoExtensions
		DataExtensions
		SegmentExtensions
		RegulationsExtensions
		BidResponseExtensions
		SeatBidExtensions
		BidExtensions
		TargetingGeoExtension
		ViewabilityExtensions
		AdxBidRequestExtension
		AdxDirectDealExtension
		AdxImpressionExtension
		AdxGeoExtension
		AppNexusBidRequestExtension
		BidRequest
		BidResponse
		NativeRequest
		NativeResponse
		Enums
*/
package openrtb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import base "beeswax/base"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BidRequestExtensions_AdsTxtStatus int32

const (
	BidRequestExtensions_UNKNOWN BidRequestExtensions_AdsTxtStatus = -1
	// The request does not contain a domain, either because it is not a web request (ie it is an
	// app or native request) or it is a web request but does not contain a domain. Since it doesn't
	// have a domain, we cannot check it's Ads.txt status.
	BidRequestExtensions_NO_DOMAIN BidRequestExtensions_AdsTxtStatus = 0
	// The request's domain does not have an Ads.txt file
	BidRequestExtensions_NO_ADS_TXT_FILE BidRequestExtensions_AdsTxtStatus = 1
	// We have not looked up the Ads.txt file for the request's domain
	BidRequestExtensions_ADS_TXT_NOT_SCANNED BidRequestExtensions_AdsTxtStatus = 2
	// The request's domain does not allow any advertising
	BidRequestExtensions_NO_ADVERTISING_ALLOWED BidRequestExtensions_AdsTxtStatus = 3
	// The request is missing a publisher id so we cannot check its Ads.txt status
	BidRequestExtensions_MISSING_PUB_ID BidRequestExtensions_AdsTxtStatus = 4
	// The request's domain does have an Ads.txt file, but it does not allow advertising from this
	// exchange / publisher ID combination
	BidRequestExtensions_NOT_AUTH BidRequestExtensions_AdsTxtStatus = 5
	// The domain's Ads.txt file allows this exchange / publisher ID to resell advertising
	BidRequestExtensions_AUTH_RESELLER BidRequestExtensions_AdsTxtStatus = 6
	// The domain's Ads.txt file allows this exchange / publisher ID to advertise directly
	BidRequestExtensions_AUTH_DIRECT BidRequestExtensions_AdsTxtStatus = 7
)

var BidRequestExtensions_AdsTxtStatus_name = map[int32]string{
	-1: "UNKNOWN",
	0:  "NO_DOMAIN",
	1:  "NO_ADS_TXT_FILE",
	2:  "ADS_TXT_NOT_SCANNED",
	3:  "NO_ADVERTISING_ALLOWED",
	4:  "MISSING_PUB_ID",
	5:  "NOT_AUTH",
	6:  "AUTH_RESELLER",
	7:  "AUTH_DIRECT",
}
var BidRequestExtensions_AdsTxtStatus_value = map[string]int32{
	"UNKNOWN":                -1,
	"NO_DOMAIN":              0,
	"NO_ADS_TXT_FILE":        1,
	"ADS_TXT_NOT_SCANNED":    2,
	"NO_ADVERTISING_ALLOWED": 3,
	"MISSING_PUB_ID":         4,
	"NOT_AUTH":               5,
	"AUTH_RESELLER":          6,
	"AUTH_DIRECT":            7,
}

func (x BidRequestExtensions_AdsTxtStatus) Enum() *BidRequestExtensions_AdsTxtStatus {
	p := new(BidRequestExtensions_AdsTxtStatus)
	*p = x
	return p
}
func (x BidRequestExtensions_AdsTxtStatus) String() string {
	return proto.EnumName(BidRequestExtensions_AdsTxtStatus_name, int32(x))
}
func (x *BidRequestExtensions_AdsTxtStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequestExtensions_AdsTxtStatus_value, data, "BidRequestExtensions_AdsTxtStatus")
	if err != nil {
		return err
	}
	*x = BidRequestExtensions_AdsTxtStatus(value)
	return nil
}
func (BidRequestExtensions_AdsTxtStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorExtension, []int{2, 0}
}

type VideoExtensions_PlacementType int32

const (
	VideoExtensions_IN_BANNER VideoExtensions_PlacementType = 0
	VideoExtensions_IN_STREAM VideoExtensions_PlacementType = 1
)

var VideoExtensions_PlacementType_name = map[int32]string{
	0: "IN_BANNER",
	1: "IN_STREAM",
}
var VideoExtensions_PlacementType_value = map[string]int32{
	"IN_BANNER": 0,
	"IN_STREAM": 1,
}

func (x VideoExtensions_PlacementType) Enum() *VideoExtensions_PlacementType {
	p := new(VideoExtensions_PlacementType)
	*p = x
	return p
}
func (x VideoExtensions_PlacementType) String() string {
	return proto.EnumName(VideoExtensions_PlacementType_name, int32(x))
}
func (x *VideoExtensions_PlacementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VideoExtensions_PlacementType_value, data, "VideoExtensions_PlacementType")
	if err != nil {
		return err
	}
	*x = VideoExtensions_PlacementType(value)
	return nil
}
func (VideoExtensions_PlacementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorExtension, []int{5, 0}
}

// Next available tag: 5
// Refer to the documentation of BuyerPricingRule in adx.proto
// to understand the meaning of these fields.
type AdvertiserInfo struct {
	IncludedAdvertisers []int64 `protobuf:"varint,1,rep,name=included_advertisers,json=includedAdvertisers" json:"included_advertisers,omitempty"`
	ExcludedAdvertisers []int64 `protobuf:"varint,2,rep,name=excluded_advertisers,json=excludedAdvertisers" json:"excluded_advertisers,omitempty"`
	Blocked             *bool   `protobuf:"varint,3,opt,name=blocked" json:"blocked,omitempty"`
	// CPM micros in buyer currency i.e. USD
	MinimumCpmMicros *int64 `protobuf:"varint,4,opt,name=minimum_cpm_micros,json=minimumCpmMicros" json:"minimum_cpm_micros,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AdvertiserInfo) Reset()                    { *m = AdvertiserInfo{} }
func (m *AdvertiserInfo) String() string            { return proto.CompactTextString(m) }
func (*AdvertiserInfo) ProtoMessage()               {}
func (*AdvertiserInfo) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{0} }

func (m *AdvertiserInfo) GetIncludedAdvertisers() []int64 {
	if m != nil {
		return m.IncludedAdvertisers
	}
	return nil
}

func (m *AdvertiserInfo) GetExcludedAdvertisers() []int64 {
	if m != nil {
		return m.ExcludedAdvertisers
	}
	return nil
}

func (m *AdvertiserInfo) GetBlocked() bool {
	if m != nil && m.Blocked != nil {
		return *m.Blocked
	}
	return false
}

func (m *AdvertiserInfo) GetMinimumCpmMicros() int64 {
	if m != nil && m.MinimumCpmMicros != nil {
		return *m.MinimumCpmMicros
	}
	return 0
}

// Next available tag: 3
// Used to represent <w,h> at various places in the
// extensions.
// For e.g. Additional ad sizes supported on an adslot.
type Dimension struct {
	Width            *int32 `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height           *int32 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Dimension) Reset()                    { *m = Dimension{} }
func (m *Dimension) String() string            { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()               {}
func (*Dimension) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{1} }

func (m *Dimension) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *Dimension) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

// Next available tag: 13
type BidRequestExtensions struct {
	InventorySource *Enums_Inventory_Source `protobuf:"varint,1,opt,name=inventory_source,json=inventorySource,enum=openrtb.Enums_Inventory_Source" json:"inventory_source,omitempty"`
	AuctionId       *base.EventId           `protobuf:"bytes,2,opt,name=auction_id,json=auctionId" json:"auction_id,omitempty"`
	// The unique identifier of the auction per buzz_key.
	// Format: <auctionid.timestamp>.<auctionid.hostid>.<auctionid.tid>.<buzz_key>
	// auction_id_str contains buzz_key so it is populated in sbs.
	AuctionidStr *string `protobuf:"bytes,8,opt,name=auctionid_str,json=auctionidStr" json:"auctionid_str,omitempty"`
	// This field is used for Geo targeting.
	// It is populated by the LocalAugmentor in Stinger.
	TargetingGeo *TargetingGeoExtension `protobuf:"bytes,3,opt,name=targeting_geo,json=targetingGeo" json:"targeting_geo,omitempty"`
	// time_of_week is a stinger calculated field used for targetting
	TimeOfWeek *int32 `protobuf:"varint,4,opt,name=time_of_week,json=timeOfWeek" json:"time_of_week,omitempty"`
	// Used to identify Stinger.
	BuzzKey *string `protobuf:"bytes,5,opt,name=buzz_key,json=buzzKey" json:"buzz_key,omitempty"`
	// This field is used by Augmentors like ManagedListAugmentor
	AugmentorData []*BidRequestExtensions_AugmentorData `protobuf:"bytes,6,rep,name=augmentor_data,json=augmentorData" json:"augmentor_data,omitempty"`
	// Determines how impression notifications will happen for this request. See
	// ImpressionTracker comments for more information.
	ImpTracker *Enums_Inventory_ImpressionTracker `protobuf:"varint,10,opt,name=imp_tracker,json=impTracker,enum=openrtb.Enums_Inventory_ImpressionTracker" json:"imp_tracker,omitempty"`
	// Determines how supplier click tracking will happen for this request. See
	// SupplierClickTracker for more information.
	SupplierClickTracker *Enums_Inventory_SupplierClickTracker `protobuf:"varint,11,opt,name=supplier_click_tracker,json=supplierClickTracker,enum=openrtb.Enums_Inventory_SupplierClickTracker" json:"supplier_click_tracker,omitempty"`
	// Exchange specific extensions
	Appnexus                     *AppNexusBidRequestExtension       `protobuf:"bytes,7,opt,name=appnexus" json:"appnexus,omitempty"`
	Adx                          *AdxBidRequestExtension            `protobuf:"bytes,9,opt,name=adx" json:"adx,omitempty"`
	AdsTxt                       *BidRequestExtensions_AdsTxtStatus `protobuf:"varint,12,opt,name=ads_txt,json=adsTxt,enum=openrtb.BidRequestExtensions_AdsTxtStatus" json:"ads_txt,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequestExtensions) Reset()                    { *m = BidRequestExtensions{} }
func (m *BidRequestExtensions) String() string            { return proto.CompactTextString(m) }
func (*BidRequestExtensions) ProtoMessage()               {}
func (*BidRequestExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{2} }

var extRange_BidRequestExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*BidRequestExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequestExtensions
}

func (m *BidRequestExtensions) GetInventorySource() Enums_Inventory_Source {
	if m != nil && m.InventorySource != nil {
		return *m.InventorySource
	}
	return Enums_Inventory_UNKNOWN_SOURCE
}

func (m *BidRequestExtensions) GetAuctionId() *base.EventId {
	if m != nil {
		return m.AuctionId
	}
	return nil
}

func (m *BidRequestExtensions) GetAuctionidStr() string {
	if m != nil && m.AuctionidStr != nil {
		return *m.AuctionidStr
	}
	return ""
}

func (m *BidRequestExtensions) GetTargetingGeo() *TargetingGeoExtension {
	if m != nil {
		return m.TargetingGeo
	}
	return nil
}

func (m *BidRequestExtensions) GetTimeOfWeek() int32 {
	if m != nil && m.TimeOfWeek != nil {
		return *m.TimeOfWeek
	}
	return 0
}

func (m *BidRequestExtensions) GetBuzzKey() string {
	if m != nil && m.BuzzKey != nil {
		return *m.BuzzKey
	}
	return ""
}

func (m *BidRequestExtensions) GetAugmentorData() []*BidRequestExtensions_AugmentorData {
	if m != nil {
		return m.AugmentorData
	}
	return nil
}

func (m *BidRequestExtensions) GetImpTracker() Enums_Inventory_ImpressionTracker {
	if m != nil && m.ImpTracker != nil {
		return *m.ImpTracker
	}
	return Enums_Inventory_NEVER_USE_TRACKER
}

func (m *BidRequestExtensions) GetSupplierClickTracker() Enums_Inventory_SupplierClickTracker {
	if m != nil && m.SupplierClickTracker != nil {
		return *m.SupplierClickTracker
	}
	return Enums_Inventory_NO_CLICK_TRACKER
}

func (m *BidRequestExtensions) GetAppnexus() *AppNexusBidRequestExtension {
	if m != nil {
		return m.Appnexus
	}
	return nil
}

func (m *BidRequestExtensions) GetAdx() *AdxBidRequestExtension {
	if m != nil {
		return m.Adx
	}
	return nil
}

func (m *BidRequestExtensions) GetAdsTxt() BidRequestExtensions_AdsTxtStatus {
	if m != nil && m.AdsTxt != nil {
		return *m.AdsTxt
	}
	return BidRequestExtensions_UNKNOWN
}

// Next available tag: 3
type BidRequestExtensions_AugmentorData struct {
	// Augmentor identifier, used for targeting
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Array of Augmentor segments
	Segment          []*BidRequestExtensions_AugmentorData_Segment `protobuf:"bytes,2,rep,name=segment" json:"segment,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *BidRequestExtensions_AugmentorData) Reset()         { *m = BidRequestExtensions_AugmentorData{} }
func (m *BidRequestExtensions_AugmentorData) String() string { return proto.CompactTextString(m) }
func (*BidRequestExtensions_AugmentorData) ProtoMessage()    {}
func (*BidRequestExtensions_AugmentorData) Descriptor() ([]byte, []int) {
	return fileDescriptorExtension, []int{2, 0}
}

func (m *BidRequestExtensions_AugmentorData) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequestExtensions_AugmentorData) GetSegment() []*BidRequestExtensions_AugmentorData_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

// Next available tag: 3
// Segment along with augmentor's ID allows augmentor based targeting
type BidRequestExtensions_AugmentorData_Segment struct {
	// ID of a augmentor’s segment
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// String representing the value of the segment.
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BidRequestExtensions_AugmentorData_Segment) Reset() {
	*m = BidRequestExtensions_AugmentorData_Segment{}
}
func (m *BidRequestExtensions_AugmentorData_Segment) String() string {
	return proto.CompactTextString(m)
}
func (*BidRequestExtensions_AugmentorData_Segment) ProtoMessage() {}
func (*BidRequestExtensions_AugmentorData_Segment) Descriptor() ([]byte, []int) {
	return fileDescriptorExtension, []int{2, 0, 0}
}

func (m *BidRequestExtensions_AugmentorData_Segment) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequestExtensions_AugmentorData_Segment) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Next available tag: 11
type ImpressionExtensions struct {
	PlacementType   *Enums_Inventory_PlacementType   `protobuf:"varint,2,opt,name=placement_type,json=placementType,enum=openrtb.Enums_Inventory_PlacementType" json:"placement_type,omitempty"`
	EnvironmentType *Enums_Inventory_EnvironmentType `protobuf:"varint,3,opt,name=environment_type,json=environmentType,enum=openrtb.Enums_Inventory_EnvironmentType" json:"environment_type,omitempty"`
	Placements      []string                         `protobuf:"bytes,5,rep,name=placements" json:"placements,omitempty"`
	AdvertiserInfo  []*AdvertiserInfo                `protobuf:"bytes,4,rep,name=advertiser_info,json=advertiserInfo" json:"advertiser_info,omitempty"`
	Viewability     *ViewabilityExtensions           `protobuf:"bytes,8,opt,name=viewability" json:"viewability,omitempty"`
	// Seat ids that the exchange considers eligible to serve on this impression.
	// This feature is currently only supported by Adx.
	EligibleSeatIds []string `protobuf:"bytes,7,rep,name=eligible_seat_ids,json=eligibleSeatIds" json:"eligible_seat_ids,omitempty"`
	// Exchange specific extensions
	Adx *AdxImpressionExtension `protobuf:"bytes,1,opt,name=adx" json:"adx,omitempty"`
	// allowed restricted ad categories for ADX
	AllowedRestrictedCategory         []int32 `protobuf:"varint,9,rep,packed,name=allowed_restricted_category,json=allowedRestrictedCategory" json:"allowed_restricted_category,omitempty"`
	AllowedRestrictedCategoryForDeals []int32 `protobuf:"varint,10,rep,packed,name=allowed_restricted_category_for_deals,json=allowedRestrictedCategoryForDeals" json:"allowed_restricted_category_for_deals,omitempty"`
	// Deprecated field. Use ViewabilityExtensions field instead.
	ExchangePredictedViewRate    *float32 `protobuf:"fixed32,6,opt,name=exchange_predicted_view_rate,json=exchangePredictedViewRate" json:"exchange_predicted_view_rate,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *ImpressionExtensions) Reset()                    { *m = ImpressionExtensions{} }
func (m *ImpressionExtensions) String() string            { return proto.CompactTextString(m) }
func (*ImpressionExtensions) ProtoMessage()               {}
func (*ImpressionExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{3} }

var extRange_ImpressionExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*ImpressionExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ImpressionExtensions
}

func (m *ImpressionExtensions) GetPlacementType() Enums_Inventory_PlacementType {
	if m != nil && m.PlacementType != nil {
		return *m.PlacementType
	}
	return Enums_Inventory_UNKNOWN_PLACEMENT_TYPE
}

func (m *ImpressionExtensions) GetEnvironmentType() Enums_Inventory_EnvironmentType {
	if m != nil && m.EnvironmentType != nil {
		return *m.EnvironmentType
	}
	return Enums_Inventory_UNKNOWN_ENVIRONMENT_TYPE
}

func (m *ImpressionExtensions) GetPlacements() []string {
	if m != nil {
		return m.Placements
	}
	return nil
}

func (m *ImpressionExtensions) GetAdvertiserInfo() []*AdvertiserInfo {
	if m != nil {
		return m.AdvertiserInfo
	}
	return nil
}

func (m *ImpressionExtensions) GetViewability() *ViewabilityExtensions {
	if m != nil {
		return m.Viewability
	}
	return nil
}

func (m *ImpressionExtensions) GetEligibleSeatIds() []string {
	if m != nil {
		return m.EligibleSeatIds
	}
	return nil
}

func (m *ImpressionExtensions) GetAdx() *AdxImpressionExtension {
	if m != nil {
		return m.Adx
	}
	return nil
}

func (m *ImpressionExtensions) GetAllowedRestrictedCategory() []int32 {
	if m != nil {
		return m.AllowedRestrictedCategory
	}
	return nil
}

func (m *ImpressionExtensions) GetAllowedRestrictedCategoryForDeals() []int32 {
	if m != nil {
		return m.AllowedRestrictedCategoryForDeals
	}
	return nil
}

func (m *ImpressionExtensions) GetExchangePredictedViewRate() float32 {
	if m != nil && m.ExchangePredictedViewRate != nil {
		return *m.ExchangePredictedViewRate
	}
	return 0
}

// Next available tag: 5
type BannerExtensions struct {
	// Blocked ApiFrameworks
	Bapis []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,1,rep,name=bapis,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"bapis,omitempty"`
	// Creative attributes that are required by the request.
	// For e.g. MoPub request have "AD_HAS_THUMBNAIL" for the creative
	//          to be returned in the response
	RequiredAttrs []CreativeAttribute `protobuf:"varint,2,rep,name=required_attrs,json=requiredAttrs,enum=openrtb.CreativeAttribute" json:"required_attrs,omitempty"`
	// Some exchanges such as Google Adx support multiple allowed sizes for
	// an impression.
	// In such cases, the additional dimensions (w, h) that are supported
	// are present in this field.
	// For example, if Adx supports 5 sets of allowed sizes in a request.
	// The first allowed size will be in banner.w and banner.h
	// The additional 4 sets will be in this field.
	AdditionalDimensions []*Dimension `protobuf:"bytes,3,rep,name=additional_dimensions,json=additionalDimensions" json:"additional_dimensions,omitempty"`
	// Some exchanges support "rewarded banners". This signifies that an end user
	// will recieve a reward for interacting with the ad. E.g. if the user plays
	// a game in a playable banner, they get game currency in a phone game.
	//
	// Two things to note:
	//   1. Protobufs sets bools false by default. Unless this field exists and
	//      is explicitly set to true, a banner is considered "nonrewarded".
	//   2. No exchange actually defines this field here, it is a generalization
	//      of the different ways that exchanges denote rewarded banners.
	Rewarded                     *bool `protobuf:"varint,4,opt,name=rewarded" json:"rewarded,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BannerExtensions) Reset()                    { *m = BannerExtensions{} }
func (m *BannerExtensions) String() string            { return proto.CompactTextString(m) }
func (*BannerExtensions) ProtoMessage()               {}
func (*BannerExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{4} }

var extRange_BannerExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*BannerExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BannerExtensions
}

func (m *BannerExtensions) GetBapis() []Enums_BidRequest_Impression_ApiFramework {
	if m != nil {
		return m.Bapis
	}
	return nil
}

func (m *BannerExtensions) GetRequiredAttrs() []CreativeAttribute {
	if m != nil {
		return m.RequiredAttrs
	}
	return nil
}

func (m *BannerExtensions) GetAdditionalDimensions() []*Dimension {
	if m != nil {
		return m.AdditionalDimensions
	}
	return nil
}

func (m *BannerExtensions) GetRewarded() bool {
	if m != nil && m.Rewarded != nil {
		return *m.Rewarded
	}
	return false
}

// Next available tag: 6
type VideoExtensions struct {
	// player_size can be one of ["S", "M"., "L", "XL", "NA"].
	// Added by augmentor in Beeswax Front End Server (FES)
	PlayerSize *string `protobuf:"bytes,1,opt,name=player_size,json=playerSize" json:"player_size,omitempty"`
	// Creative attributes that are required by the request.
	// For e.g. Adx requests that require skippable ads are modeled
	// as having required_attr = AD_CAN_BE_SKIPPED
	RequiredAttrs []CreativeAttribute            `protobuf:"varint,2,rep,name=required_attrs,json=requiredAttrs,enum=openrtb.CreativeAttribute" json:"required_attrs,omitempty"`
	PlacementType *VideoExtensions_PlacementType `protobuf:"varint,3,opt,name=placement_type,json=placementType,enum=openrtb.VideoExtensions_PlacementType,def=1" json:"placement_type,omitempty"`
	// Number of seconds into the video ad when the skip button appears.
	// This is only applicable to skippable video ads.
	// Some inventory sources such as Google Ad Exchange do not specify
	// this skip offset explicity in the bid request.
	// For such sources, skip_offset of 5 seconds is a safe default.
	SkipOffset *int32 `protobuf:"varint,4,opt,name=skip_offset,json=skipOffset,def=5" json:"skip_offset,omitempty"`
	// Some exchanges support "rewarded videos". This signifies that an end user
	// will recieve a reward for interacting with the ad. E.g. if the user watches
	// the whole video, they get game currency in a phone game.
	//
	// Two things to note:
	//   1. Protobufs sets bools false by default. Unless this field exists and
	//      is explicitly set to true, a video is considered "nonrewarded".
	//   2. No exchange actually defines this field here, it is a generalization
	//      of the different ways that exchanges denote rewarded videos.
	Rewarded                     *bool `protobuf:"varint,5,opt,name=rewarded" json:"rewarded,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *VideoExtensions) Reset()                    { *m = VideoExtensions{} }
func (m *VideoExtensions) String() string            { return proto.CompactTextString(m) }
func (*VideoExtensions) ProtoMessage()               {}
func (*VideoExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{5} }

var extRange_VideoExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*VideoExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_VideoExtensions
}

const Default_VideoExtensions_PlacementType VideoExtensions_PlacementType = VideoExtensions_IN_STREAM
const Default_VideoExtensions_SkipOffset int32 = 5

func (m *VideoExtensions) GetPlayerSize() string {
	if m != nil && m.PlayerSize != nil {
		return *m.PlayerSize
	}
	return ""
}

func (m *VideoExtensions) GetRequiredAttrs() []CreativeAttribute {
	if m != nil {
		return m.RequiredAttrs
	}
	return nil
}

func (m *VideoExtensions) GetPlacementType() VideoExtensions_PlacementType {
	if m != nil && m.PlacementType != nil {
		return *m.PlacementType
	}
	return Default_VideoExtensions_PlacementType
}

func (m *VideoExtensions) GetSkipOffset() int32 {
	if m != nil && m.SkipOffset != nil {
		return *m.SkipOffset
	}
	return Default_VideoExtensions_SkipOffset
}

func (m *VideoExtensions) GetRewarded() bool {
	if m != nil && m.Rewarded != nil {
		return *m.Rewarded
	}
	return false
}

type NativeExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeExtensions) Reset()                    { *m = NativeExtensions{} }
func (m *NativeExtensions) String() string            { return proto.CompactTextString(m) }
func (*NativeExtensions) ProtoMessage()               {}
func (*NativeExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{6} }

var extRange_NativeExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*NativeExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeExtensions
}

type PMPExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *PMPExtensions) Reset()                    { *m = PMPExtensions{} }
func (m *PMPExtensions) String() string            { return proto.CompactTextString(m) }
func (*PMPExtensions) ProtoMessage()               {}
func (*PMPExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{7} }

var extRange_PMPExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*PMPExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_PMPExtensions
}

// Next available tag: 2
type DirectDealExtensions struct {
	// Exchange specific extensions
	Adx                          *AdxDirectDealExtension `protobuf:"bytes,1,opt,name=adx" json:"adx,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *DirectDealExtensions) Reset()                    { *m = DirectDealExtensions{} }
func (m *DirectDealExtensions) String() string            { return proto.CompactTextString(m) }
func (*DirectDealExtensions) ProtoMessage()               {}
func (*DirectDealExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{8} }

var extRange_DirectDealExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*DirectDealExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_DirectDealExtensions
}

func (m *DirectDealExtensions) GetAdx() *AdxDirectDealExtension {
	if m != nil {
		return m.Adx
	}
	return nil
}

type SiteExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *SiteExtensions) Reset()                    { *m = SiteExtensions{} }
func (m *SiteExtensions) String() string            { return proto.CompactTextString(m) }
func (*SiteExtensions) ProtoMessage()               {}
func (*SiteExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{9} }

var extRange_SiteExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*SiteExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_SiteExtensions
}

type AppExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *AppExtensions) Reset()                    { *m = AppExtensions{} }
func (m *AppExtensions) String() string            { return proto.CompactTextString(m) }
func (*AppExtensions) ProtoMessage()               {}
func (*AppExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{10} }

var extRange_AppExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*AppExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_AppExtensions
}

type ContentExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *ContentExtensions) Reset()                    { *m = ContentExtensions{} }
func (m *ContentExtensions) String() string            { return proto.CompactTextString(m) }
func (*ContentExtensions) ProtoMessage()               {}
func (*ContentExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{11} }

var extRange_ContentExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*ContentExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ContentExtensions
}

type ProducerExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *ProducerExtensions) Reset()                    { *m = ProducerExtensions{} }
func (m *ProducerExtensions) String() string            { return proto.CompactTextString(m) }
func (*ProducerExtensions) ProtoMessage()               {}
func (*ProducerExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{12} }

var extRange_ProducerExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*ProducerExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ProducerExtensions
}

// Next available tag: 12
// Tag 1: idfa - Deprecated. Do not resuse.
type DeviceExtensions struct {
	// Device screen size. Valid values are "S", "M", "L", "XL", and "NA"
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedDeviceScreenSize *string `protobuf:"bytes,2,opt,name=augmented_device_screen_size,json=augmentedDeviceScreenSize,def=NA" json:"augmented_device_screen_size,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedBrowser *string `protobuf:"bytes,3,opt,name=augmented_browser,json=augmentedBrowser,def=-1" json:"augmented_browser,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedBrowserVersion *string `protobuf:"bytes,4,opt,name=augmented_browser_version,json=augmentedBrowserVersion,def=-1" json:"augmented_browser_version,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedOs *string `protobuf:"bytes,5,opt,name=augmented_os,json=augmentedOs,def=-1" json:"augmented_os,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedOsv *string `protobuf:"bytes,6,opt,name=augmented_osv,json=augmentedOsv,def=-1" json:"augmented_osv,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedModel *string `protobuf:"bytes,7,opt,name=augmented_model,json=augmentedModel,def=-1" json:"augmented_model,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedMake *string `protobuf:"bytes,8,opt,name=augmented_make,json=augmentedMake,def=-1" json:"augmented_make,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedDevicetype *Enums_BidRequest_Device_DeviceType `protobuf:"varint,9,opt,name=augmented_devicetype,json=augmentedDevicetype,enum=openrtb.Enums_BidRequest_Device_DeviceType,def=-1" json:"augmented_devicetype,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedCarrier             *string `protobuf:"bytes,10,opt,name=augmented_carrier,json=augmentedCarrier" json:"augmented_carrier,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *DeviceExtensions) Reset()                    { *m = DeviceExtensions{} }
func (m *DeviceExtensions) String() string            { return proto.CompactTextString(m) }
func (*DeviceExtensions) ProtoMessage()               {}
func (*DeviceExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{13} }

var extRange_DeviceExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*DeviceExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_DeviceExtensions
}

const Default_DeviceExtensions_AugmentedDeviceScreenSize string = "NA"
const Default_DeviceExtensions_AugmentedBrowser string = "-1"
const Default_DeviceExtensions_AugmentedBrowserVersion string = "-1"
const Default_DeviceExtensions_AugmentedOs string = "-1"
const Default_DeviceExtensions_AugmentedOsv string = "-1"
const Default_DeviceExtensions_AugmentedModel string = "-1"
const Default_DeviceExtensions_AugmentedMake string = "-1"
const Default_DeviceExtensions_AugmentedDevicetype Enums_BidRequest_Device_DeviceType = Enums_BidRequest_Device_UNKNOWN

func (m *DeviceExtensions) GetAugmentedDeviceScreenSize() string {
	if m != nil && m.AugmentedDeviceScreenSize != nil {
		return *m.AugmentedDeviceScreenSize
	}
	return Default_DeviceExtensions_AugmentedDeviceScreenSize
}

func (m *DeviceExtensions) GetAugmentedBrowser() string {
	if m != nil && m.AugmentedBrowser != nil {
		return *m.AugmentedBrowser
	}
	return Default_DeviceExtensions_AugmentedBrowser
}

func (m *DeviceExtensions) GetAugmentedBrowserVersion() string {
	if m != nil && m.AugmentedBrowserVersion != nil {
		return *m.AugmentedBrowserVersion
	}
	return Default_DeviceExtensions_AugmentedBrowserVersion
}

func (m *DeviceExtensions) GetAugmentedOs() string {
	if m != nil && m.AugmentedOs != nil {
		return *m.AugmentedOs
	}
	return Default_DeviceExtensions_AugmentedOs
}

func (m *DeviceExtensions) GetAugmentedOsv() string {
	if m != nil && m.AugmentedOsv != nil {
		return *m.AugmentedOsv
	}
	return Default_DeviceExtensions_AugmentedOsv
}

func (m *DeviceExtensions) GetAugmentedModel() string {
	if m != nil && m.AugmentedModel != nil {
		return *m.AugmentedModel
	}
	return Default_DeviceExtensions_AugmentedModel
}

func (m *DeviceExtensions) GetAugmentedMake() string {
	if m != nil && m.AugmentedMake != nil {
		return *m.AugmentedMake
	}
	return Default_DeviceExtensions_AugmentedMake
}

func (m *DeviceExtensions) GetAugmentedDevicetype() Enums_BidRequest_Device_DeviceType {
	if m != nil && m.AugmentedDevicetype != nil {
		return *m.AugmentedDevicetype
	}
	return Default_DeviceExtensions_AugmentedDevicetype
}

func (m *DeviceExtensions) GetAugmentedCarrier() string {
	if m != nil && m.AugmentedCarrier != nil {
		return *m.AugmentedCarrier
	}
	return ""
}

// Next available tag: 5
type UserExtensions struct {
	// This field identifies the user of the bid request. It will be used
	// for user segment lookup and frequency cap.
	// For WEB request, its value is bito_id (user.id).
	// For APP request, its value is the first field which has value
	// in the following order:
	// device.ifa -> device.dpidsha1 -> device.dpidmd5
	// And the value is prefixed with the names in Enum.Bidrequest.User.UserIdType
	// (Except bito_id - we still use bito as prefix)
	UserId            *string                             `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserIdType        *Enums_BidRequest_User_UserIdType   `protobuf:"varint,2,opt,name=user_id_type,json=userIdType,enum=openrtb.Enums_BidRequest_User_UserIdType" json:"user_id_type,omitempty"`
	MatchedUserGroups []*UserExtensions_MatchedUserGroups `protobuf:"bytes,4,rep,name=matched_user_groups,json=matchedUserGroups" json:"matched_user_groups,omitempty"`
	// Number of days since the user cookie has been dropped, for example, 10
	CookieAge                    *int32 `protobuf:"varint,3,opt,name=cookie_age,json=cookieAge" json:"cookie_age,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *UserExtensions) Reset()                    { *m = UserExtensions{} }
func (m *UserExtensions) String() string            { return proto.CompactTextString(m) }
func (*UserExtensions) ProtoMessage()               {}
func (*UserExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{14} }

var extRange_UserExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*UserExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_UserExtensions
}

func (m *UserExtensions) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UserExtensions) GetUserIdType() Enums_BidRequest_User_UserIdType {
	if m != nil && m.UserIdType != nil {
		return *m.UserIdType
	}
	return Enums_BidRequest_User_UNKNOWN
}

func (m *UserExtensions) GetMatchedUserGroups() []*UserExtensions_MatchedUserGroups {
	if m != nil {
		return m.MatchedUserGroups
	}
	return nil
}

func (m *UserExtensions) GetCookieAge() int32 {
	if m != nil && m.CookieAge != nil {
		return *m.CookieAge
	}
	return 0
}

// Next available tag: 3
type UserExtensions_MatchedUserGroups struct {
	MatchedUserIds   []string `protobuf:"bytes,1,rep,name=matched_user_ids,json=matchedUserIds" json:"matched_user_ids,omitempty"`
	PartnerHandle    *string  `protobuf:"bytes,2,opt,name=partner_handle,json=partnerHandle" json:"partner_handle,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserExtensions_MatchedUserGroups) Reset()         { *m = UserExtensions_MatchedUserGroups{} }
func (m *UserExtensions_MatchedUserGroups) String() string { return proto.CompactTextString(m) }
func (*UserExtensions_MatchedUserGroups) ProtoMessage()    {}
func (*UserExtensions_MatchedUserGroups) Descriptor() ([]byte, []int) {
	return fileDescriptorExtension, []int{14, 0}
}

func (m *UserExtensions_MatchedUserGroups) GetMatchedUserIds() []string {
	if m != nil {
		return m.MatchedUserIds
	}
	return nil
}

func (m *UserExtensions_MatchedUserGroups) GetPartnerHandle() string {
	if m != nil && m.PartnerHandle != nil {
		return *m.PartnerHandle
	}
	return ""
}

type PublisherExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *PublisherExtensions) Reset()                    { *m = PublisherExtensions{} }
func (m *PublisherExtensions) String() string            { return proto.CompactTextString(m) }
func (*PublisherExtensions) ProtoMessage()               {}
func (*PublisherExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{15} }

var extRange_PublisherExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*PublisherExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_PublisherExtensions
}

// Next available tag: 3
type GeoExtensions struct {
	Adx *AdxGeoExtension `protobuf:"bytes,1,opt,name=adx" json:"adx,omitempty"`
	// All granularities of regions in ISO 3166-2.
	Regions                      []string `protobuf:"bytes,2,rep,name=regions" json:"regions,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *GeoExtensions) Reset()                    { *m = GeoExtensions{} }
func (m *GeoExtensions) String() string            { return proto.CompactTextString(m) }
func (*GeoExtensions) ProtoMessage()               {}
func (*GeoExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{16} }

var extRange_GeoExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*GeoExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_GeoExtensions
}

func (m *GeoExtensions) GetAdx() *AdxGeoExtension {
	if m != nil {
		return m.Adx
	}
	return nil
}

func (m *GeoExtensions) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

// Next available tag: 2
type DataExtensions struct {
	BeeswaxAugmented             *bool `protobuf:"varint,1,opt,name=beeswax_augmented,json=beeswaxAugmented,def=0" json:"beeswax_augmented,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *DataExtensions) Reset()                    { *m = DataExtensions{} }
func (m *DataExtensions) String() string            { return proto.CompactTextString(m) }
func (*DataExtensions) ProtoMessage()               {}
func (*DataExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{17} }

var extRange_DataExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*DataExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_DataExtensions
}

const Default_DataExtensions_BeeswaxAugmented bool = false

func (m *DataExtensions) GetBeeswaxAugmented() bool {
	if m != nil && m.BeeswaxAugmented != nil {
		return *m.BeeswaxAugmented
	}
	return Default_DataExtensions_BeeswaxAugmented
}

type SegmentExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *SegmentExtensions) Reset()                    { *m = SegmentExtensions{} }
func (m *SegmentExtensions) String() string            { return proto.CompactTextString(m) }
func (*SegmentExtensions) ProtoMessage()               {}
func (*SegmentExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{18} }

var extRange_SegmentExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*SegmentExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_SegmentExtensions
}

type RegulationsExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *RegulationsExtensions) Reset()                    { *m = RegulationsExtensions{} }
func (m *RegulationsExtensions) String() string            { return proto.CompactTextString(m) }
func (*RegulationsExtensions) ProtoMessage()               {}
func (*RegulationsExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{19} }

var extRange_RegulationsExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*RegulationsExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_RegulationsExtensions
}

type BidResponseExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidResponseExtensions) Reset()                    { *m = BidResponseExtensions{} }
func (m *BidResponseExtensions) String() string            { return proto.CompactTextString(m) }
func (*BidResponseExtensions) ProtoMessage()               {}
func (*BidResponseExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{20} }

var extRange_BidResponseExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*BidResponseExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponseExtensions
}

type SeatBidExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *SeatBidExtensions) Reset()                    { *m = SeatBidExtensions{} }
func (m *SeatBidExtensions) String() string            { return proto.CompactTextString(m) }
func (*SeatBidExtensions) ProtoMessage()               {}
func (*SeatBidExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{21} }

var extRange_SeatBidExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*SeatBidExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_SeatBidExtensions
}

// Next available tag: 11
type BidExtensions struct {
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidExtensions) Reset()                    { *m = BidExtensions{} }
func (m *BidExtensions) String() string            { return proto.CompactTextString(m) }
func (*BidExtensions) ProtoMessage()               {}
func (*BidExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{22} }

var extRange_BidExtensions = []proto.ExtensionRange{
	{Start: 1000, End: 536870911},
}

func (*BidExtensions) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidExtensions
}

// This field is used for Geo targeting.
// It is populated by the LocalAugmentor in Stinger.
type TargetingGeoExtension struct {
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,1,opt,name=country,def=000" json:"country,omitempty"`
	// Region using ISO 3166-2
	Region *string `protobuf:"bytes,2,opt,name=region,def=000/00" json:"region,omitempty"`
	// All granularities of regions in ISO 3166-2. If it is empty, "000/00" should
	// be used as the targeting key.
	Regions []string `protobuf:"bytes,10,rep,name=regions" json:"regions,omitempty"`
	// City using United Nations Code for Trade and Transport Locations
	// (http://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,3,opt,name=city,def=-1" json:"city,omitempty"`
	// Zip/postal code.
	Zip              *string                            `protobuf:"bytes,4,opt,name=zip,def=-1" json:"zip,omitempty"`
	Metro            *string                            `protobuf:"bytes,5,opt,name=metro,def=000" json:"metro,omitempty"`
	LatLongPresent   *bool                              `protobuf:"varint,6,opt,name=lat_long_present,json=latLongPresent,def=0" json:"lat_long_present,omitempty"`
	Lat              *float64                           `protobuf:"fixed64,7,opt,name=lat" json:"lat,omitempty"`
	Lon              *float64                           `protobuf:"fixed64,8,opt,name=lon" json:"lon,omitempty"`
	Type             *Enums_BidRequest_Geo_LocationType `protobuf:"varint,9,opt,name=type,enum=openrtb.Enums_BidRequest_Geo_LocationType" json:"type,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *TargetingGeoExtension) Reset()                    { *m = TargetingGeoExtension{} }
func (m *TargetingGeoExtension) String() string            { return proto.CompactTextString(m) }
func (*TargetingGeoExtension) ProtoMessage()               {}
func (*TargetingGeoExtension) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{23} }

const Default_TargetingGeoExtension_Country string = "000"
const Default_TargetingGeoExtension_Region string = "000/00"
const Default_TargetingGeoExtension_City string = "-1"
const Default_TargetingGeoExtension_Zip string = "-1"
const Default_TargetingGeoExtension_Metro string = "000"
const Default_TargetingGeoExtension_LatLongPresent bool = false

func (m *TargetingGeoExtension) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return Default_TargetingGeoExtension_Country
}

func (m *TargetingGeoExtension) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return Default_TargetingGeoExtension_Region
}

func (m *TargetingGeoExtension) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *TargetingGeoExtension) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return Default_TargetingGeoExtension_City
}

func (m *TargetingGeoExtension) GetZip() string {
	if m != nil && m.Zip != nil {
		return *m.Zip
	}
	return Default_TargetingGeoExtension_Zip
}

func (m *TargetingGeoExtension) GetMetro() string {
	if m != nil && m.Metro != nil {
		return *m.Metro
	}
	return Default_TargetingGeoExtension_Metro
}

func (m *TargetingGeoExtension) GetLatLongPresent() bool {
	if m != nil && m.LatLongPresent != nil {
		return *m.LatLongPresent
	}
	return Default_TargetingGeoExtension_LatLongPresent
}

func (m *TargetingGeoExtension) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *TargetingGeoExtension) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *TargetingGeoExtension) GetType() Enums_BidRequest_Geo_LocationType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Enums_BidRequest_Geo_GPS_LOCATION
}

// Viewability.predicted_viewability is populated by FES LocalAugmentor
// and used for targeting in Matcher
type ViewabilityExtensions struct {
	// Specifies the predicted viewability from Beeswax ViewabilityPredictor
	PredictedViewability *float32 `protobuf:"fixed32,1,opt,name=predicted_viewability,json=predictedViewability" json:"predicted_viewability,omitempty"`
	// Specifies the probability that the impression will be viewable by the user,
	// based on historical data.
	// Currently populated for AppNexus and AdX only
	ExchangePredictedViewRate *float32 `protobuf:"fixed32,2,opt,name=exchange_predicted_view_rate,json=exchangePredictedViewRate" json:"exchange_predicted_view_rate,omitempty"`
	XXX_unrecognized          []byte   `json:"-"`
}

func (m *ViewabilityExtensions) Reset()                    { *m = ViewabilityExtensions{} }
func (m *ViewabilityExtensions) String() string            { return proto.CompactTextString(m) }
func (*ViewabilityExtensions) ProtoMessage()               {}
func (*ViewabilityExtensions) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{24} }

func (m *ViewabilityExtensions) GetPredictedViewability() float32 {
	if m != nil && m.PredictedViewability != nil {
		return *m.PredictedViewability
	}
	return 0
}

func (m *ViewabilityExtensions) GetExchangePredictedViewRate() float32 {
	if m != nil && m.ExchangePredictedViewRate != nil {
		return *m.ExchangePredictedViewRate
	}
	return 0
}

// Exchange specific extensions.
// Next available tag: 3
type AdxBidRequestExtension struct {
	// If true, then the selective callout model predicted that we will not bid
	// on this request. ADX sends a sampled percentage of such requests so that they
	// can automatically update the model when bidding patterns change.
	IsPredictedToBeIgnored *bool `protobuf:"varint,1,opt,name=is_predicted_to_be_ignored,json=isPredictedToBeIgnored" json:"is_predicted_to_be_ignored,omitempty"`
	// The offset of the user's time from GMT in minutes.
	// For example, GMT-5 is timezone_offset = -300.
	TimezoneOffset   *int32 `protobuf:"varint,2,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AdxBidRequestExtension) Reset()                    { *m = AdxBidRequestExtension{} }
func (m *AdxBidRequestExtension) String() string            { return proto.CompactTextString(m) }
func (*AdxBidRequestExtension) ProtoMessage()               {}
func (*AdxBidRequestExtension) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{25} }

func (m *AdxBidRequestExtension) GetIsPredictedToBeIgnored() bool {
	if m != nil && m.IsPredictedToBeIgnored != nil {
		return *m.IsPredictedToBeIgnored
	}
	return false
}

func (m *AdxBidRequestExtension) GetTimezoneOffset() int32 {
	if m != nil && m.TimezoneOffset != nil {
		return *m.TimezoneOffset
	}
	return 0
}

// Next available tag: 2
type AdxDirectDealExtension struct {
	PublisherBlocksOverridden *bool  `protobuf:"varint,1,opt,name=publisher_blocks_overridden,json=publisherBlocksOverridden,def=0" json:"publisher_blocks_overridden,omitempty"`
	XXX_unrecognized          []byte `json:"-"`
}

func (m *AdxDirectDealExtension) Reset()                    { *m = AdxDirectDealExtension{} }
func (m *AdxDirectDealExtension) String() string            { return proto.CompactTextString(m) }
func (*AdxDirectDealExtension) ProtoMessage()               {}
func (*AdxDirectDealExtension) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{26} }

const Default_AdxDirectDealExtension_PublisherBlocksOverridden bool = false

func (m *AdxDirectDealExtension) GetPublisherBlocksOverridden() bool {
	if m != nil && m.PublisherBlocksOverridden != nil {
		return *m.PublisherBlocksOverridden
	}
	return Default_AdxDirectDealExtension_PublisherBlocksOverridden
}

// Next available tag: 3
type AdxImpressionExtension struct {
	AdslotId *int32 `protobuf:"varint,1,opt,name=adslot_id,json=adslotId" json:"adslot_id,omitempty"`
	// Historical click-through rate for ads served in the ad slot. This is
	// expressed as a fraction in the range [0.0, 1.0]. The default value of
	// -1.0 indicates that historical click-through rate data is not available.
	// This figure does not include data aggregated from AdWords.
	ClickThroughRate *float32 `protobuf:"fixed32,2,opt,name=click_through_rate,json=clickThroughRate,def=-1" json:"click_through_rate,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AdxImpressionExtension) Reset()                    { *m = AdxImpressionExtension{} }
func (m *AdxImpressionExtension) String() string            { return proto.CompactTextString(m) }
func (*AdxImpressionExtension) ProtoMessage()               {}
func (*AdxImpressionExtension) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{27} }

const Default_AdxImpressionExtension_ClickThroughRate float32 = -1

func (m *AdxImpressionExtension) GetAdslotId() int32 {
	if m != nil && m.AdslotId != nil {
		return *m.AdslotId
	}
	return 0
}

func (m *AdxImpressionExtension) GetClickThroughRate() float32 {
	if m != nil && m.ClickThroughRate != nil {
		return *m.ClickThroughRate
	}
	return Default_AdxImpressionExtension_ClickThroughRate
}

type AdxGeoExtension struct {
	DmaRegionCode *int32 `protobuf:"varint,1,opt,name=dma_region_code,json=dmaRegionCode" json:"dma_region_code,omitempty"`
	// Use fes.exchange.adx.AdxBidRequest.HyperlocalSet to parse.
	HyperlocalSet    []byte `protobuf:"bytes,2,opt,name=hyperlocal_set,json=hyperlocalSet" json:"hyperlocal_set,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AdxGeoExtension) Reset()                    { *m = AdxGeoExtension{} }
func (m *AdxGeoExtension) String() string            { return proto.CompactTextString(m) }
func (*AdxGeoExtension) ProtoMessage()               {}
func (*AdxGeoExtension) Descriptor() ([]byte, []int) { return fileDescriptorExtension, []int{28} }

func (m *AdxGeoExtension) GetDmaRegionCode() int32 {
	if m != nil && m.DmaRegionCode != nil {
		return *m.DmaRegionCode
	}
	return 0
}

func (m *AdxGeoExtension) GetHyperlocalSet() []byte {
	if m != nil {
		return m.HyperlocalSet
	}
	return nil
}

// 2. AppNexus Exchange
// Next available tag: 2
type AppNexusBidRequestExtension struct {
	// Specifies the ID of the member selling the inventory.
	SellerMemberId   *int32 `protobuf:"varint,1,opt,name=seller_member_id,json=sellerMemberId" json:"seller_member_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AppNexusBidRequestExtension) Reset()         { *m = AppNexusBidRequestExtension{} }
func (m *AppNexusBidRequestExtension) String() string { return proto.CompactTextString(m) }
func (*AppNexusBidRequestExtension) ProtoMessage()    {}
func (*AppNexusBidRequestExtension) Descriptor() ([]byte, []int) {
	return fileDescriptorExtension, []int{29}
}

func (m *AppNexusBidRequestExtension) GetSellerMemberId() int32 {
	if m != nil && m.SellerMemberId != nil {
		return *m.SellerMemberId
	}
	return 0
}

func init() {
	proto.RegisterType((*AdvertiserInfo)(nil), "openrtb.AdvertiserInfo")
	proto.RegisterType((*Dimension)(nil), "openrtb.Dimension")
	proto.RegisterType((*BidRequestExtensions)(nil), "openrtb.BidRequestExtensions")
	proto.RegisterType((*BidRequestExtensions_AugmentorData)(nil), "openrtb.BidRequestExtensions.AugmentorData")
	proto.RegisterType((*BidRequestExtensions_AugmentorData_Segment)(nil), "openrtb.BidRequestExtensions.AugmentorData.Segment")
	proto.RegisterType((*ImpressionExtensions)(nil), "openrtb.ImpressionExtensions")
	proto.RegisterType((*BannerExtensions)(nil), "openrtb.BannerExtensions")
	proto.RegisterType((*VideoExtensions)(nil), "openrtb.VideoExtensions")
	proto.RegisterType((*NativeExtensions)(nil), "openrtb.NativeExtensions")
	proto.RegisterType((*PMPExtensions)(nil), "openrtb.PMPExtensions")
	proto.RegisterType((*DirectDealExtensions)(nil), "openrtb.DirectDealExtensions")
	proto.RegisterType((*SiteExtensions)(nil), "openrtb.SiteExtensions")
	proto.RegisterType((*AppExtensions)(nil), "openrtb.AppExtensions")
	proto.RegisterType((*ContentExtensions)(nil), "openrtb.ContentExtensions")
	proto.RegisterType((*ProducerExtensions)(nil), "openrtb.ProducerExtensions")
	proto.RegisterType((*DeviceExtensions)(nil), "openrtb.DeviceExtensions")
	proto.RegisterType((*UserExtensions)(nil), "openrtb.UserExtensions")
	proto.RegisterType((*UserExtensions_MatchedUserGroups)(nil), "openrtb.UserExtensions.MatchedUserGroups")
	proto.RegisterType((*PublisherExtensions)(nil), "openrtb.PublisherExtensions")
	proto.RegisterType((*GeoExtensions)(nil), "openrtb.GeoExtensions")
	proto.RegisterType((*DataExtensions)(nil), "openrtb.DataExtensions")
	proto.RegisterType((*SegmentExtensions)(nil), "openrtb.SegmentExtensions")
	proto.RegisterType((*RegulationsExtensions)(nil), "openrtb.RegulationsExtensions")
	proto.RegisterType((*BidResponseExtensions)(nil), "openrtb.BidResponseExtensions")
	proto.RegisterType((*SeatBidExtensions)(nil), "openrtb.SeatBidExtensions")
	proto.RegisterType((*BidExtensions)(nil), "openrtb.BidExtensions")
	proto.RegisterType((*TargetingGeoExtension)(nil), "openrtb.TargetingGeoExtension")
	proto.RegisterType((*ViewabilityExtensions)(nil), "openrtb.ViewabilityExtensions")
	proto.RegisterType((*AdxBidRequestExtension)(nil), "openrtb.AdxBidRequestExtension")
	proto.RegisterType((*AdxDirectDealExtension)(nil), "openrtb.AdxDirectDealExtension")
	proto.RegisterType((*AdxImpressionExtension)(nil), "openrtb.AdxImpressionExtension")
	proto.RegisterType((*AdxGeoExtension)(nil), "openrtb.AdxGeoExtension")
	proto.RegisterType((*AppNexusBidRequestExtension)(nil), "openrtb.AppNexusBidRequestExtension")
	proto.RegisterEnum("openrtb.BidRequestExtensions_AdsTxtStatus", BidRequestExtensions_AdsTxtStatus_name, BidRequestExtensions_AdsTxtStatus_value)
	proto.RegisterEnum("openrtb.VideoExtensions_PlacementType", VideoExtensions_PlacementType_name, VideoExtensions_PlacementType_value)
}
func (m *AdvertiserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IncludedAdvertisers) > 0 {
		for _, num := range m.IncludedAdvertisers {
			dAtA[i] = 0x8
			i++
			i = encodeVarintExtension(dAtA, i, uint64(num))
		}
	}
	if len(m.ExcludedAdvertisers) > 0 {
		for _, num := range m.ExcludedAdvertisers {
			dAtA[i] = 0x10
			i++
			i = encodeVarintExtension(dAtA, i, uint64(num))
		}
	}
	if m.Blocked != nil {
		dAtA[i] = 0x18
		i++
		if *m.Blocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MinimumCpmMicros != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.MinimumCpmMicros))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Dimension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dimension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Width != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.Width))
	}
	if m.Height != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.Height))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BidRequestExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidRequestExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InventorySource != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.InventorySource))
	}
	if m.AuctionId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.AuctionId.Size()))
		n1, err := m.AuctionId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TargetingGeo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.TargetingGeo.Size()))
		n2, err := m.TargetingGeo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TimeOfWeek != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.TimeOfWeek))
	}
	if m.BuzzKey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.BuzzKey)))
		i += copy(dAtA[i:], *m.BuzzKey)
	}
	if len(m.AugmentorData) > 0 {
		for _, msg := range m.AugmentorData {
			dAtA[i] = 0x32
			i++
			i = encodeVarintExtension(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Appnexus != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.Appnexus.Size()))
		n3, err := m.Appnexus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.AuctionidStr != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AuctionidStr)))
		i += copy(dAtA[i:], *m.AuctionidStr)
	}
	if m.Adx != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.Adx.Size()))
		n4, err := m.Adx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ImpTracker != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.ImpTracker))
	}
	if m.SupplierClickTracker != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.SupplierClickTracker))
	}
	if m.AdsTxt != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.AdsTxt))
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BidRequestExtensions_AugmentorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidRequestExtensions_AugmentorData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if len(m.Segment) > 0 {
		for _, msg := range m.Segment {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExtension(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BidRequestExtensions_AugmentorData_Segment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidRequestExtensions_AugmentorData_Segment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ImpressionExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpressionExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Adx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.Adx.Size()))
		n5, err := m.Adx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PlacementType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.PlacementType))
	}
	if m.EnvironmentType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.EnvironmentType))
	}
	if len(m.AdvertiserInfo) > 0 {
		for _, msg := range m.AdvertiserInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExtension(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Placements) > 0 {
		for _, s := range m.Placements {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ExchangePredictedViewRate != nil {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ExchangePredictedViewRate))))
		i += 4
	}
	if len(m.EligibleSeatIds) > 0 {
		for _, s := range m.EligibleSeatIds {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Viewability != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.Viewability.Size()))
		n6, err := m.Viewability.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.AllowedRestrictedCategory) > 0 {
		dAtA8 := make([]byte, len(m.AllowedRestrictedCategory)*10)
		var j7 int
		for _, num1 := range m.AllowedRestrictedCategory {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.AllowedRestrictedCategoryForDeals) > 0 {
		dAtA10 := make([]byte, len(m.AllowedRestrictedCategoryForDeals)*10)
		var j9 int
		for _, num1 := range m.AllowedRestrictedCategoryForDeals {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintExtension(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BannerExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bapis) > 0 {
		for _, num := range m.Bapis {
			dAtA[i] = 0x8
			i++
			i = encodeVarintExtension(dAtA, i, uint64(num))
		}
	}
	if len(m.RequiredAttrs) > 0 {
		for _, num := range m.RequiredAttrs {
			dAtA[i] = 0x10
			i++
			i = encodeVarintExtension(dAtA, i, uint64(num))
		}
	}
	if len(m.AdditionalDimensions) > 0 {
		for _, msg := range m.AdditionalDimensions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExtension(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Rewarded != nil {
		dAtA[i] = 0x20
		i++
		if *m.Rewarded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideoExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerSize != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.PlayerSize)))
		i += copy(dAtA[i:], *m.PlayerSize)
	}
	if len(m.RequiredAttrs) > 0 {
		for _, num := range m.RequiredAttrs {
			dAtA[i] = 0x10
			i++
			i = encodeVarintExtension(dAtA, i, uint64(num))
		}
	}
	if m.PlacementType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.PlacementType))
	}
	if m.SkipOffset != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.SkipOffset))
	}
	if m.Rewarded != nil {
		dAtA[i] = 0x28
		i++
		if *m.Rewarded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NativeExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PMPExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PMPExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectDealExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectDealExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Adx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.Adx.Size()))
		n11, err := m.Adx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SiteExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AppExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContentExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProducerExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProducerExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeviceExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AugmentedDeviceScreenSize != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedDeviceScreenSize)))
		i += copy(dAtA[i:], *m.AugmentedDeviceScreenSize)
	}
	if m.AugmentedBrowser != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedBrowser)))
		i += copy(dAtA[i:], *m.AugmentedBrowser)
	}
	if m.AugmentedBrowserVersion != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedBrowserVersion)))
		i += copy(dAtA[i:], *m.AugmentedBrowserVersion)
	}
	if m.AugmentedOs != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedOs)))
		i += copy(dAtA[i:], *m.AugmentedOs)
	}
	if m.AugmentedOsv != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedOsv)))
		i += copy(dAtA[i:], *m.AugmentedOsv)
	}
	if m.AugmentedModel != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedModel)))
		i += copy(dAtA[i:], *m.AugmentedModel)
	}
	if m.AugmentedMake != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedMake)))
		i += copy(dAtA[i:], *m.AugmentedMake)
	}
	if m.AugmentedDevicetype != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.AugmentedDevicetype))
	}
	if m.AugmentedCarrier != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.AugmentedCarrier)))
		i += copy(dAtA[i:], *m.AugmentedCarrier)
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.UserId)))
		i += copy(dAtA[i:], *m.UserId)
	}
	if m.UserIdType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.UserIdType))
	}
	if m.CookieAge != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.CookieAge))
	}
	if len(m.MatchedUserGroups) > 0 {
		for _, msg := range m.MatchedUserGroups {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExtension(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserExtensions_MatchedUserGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExtensions_MatchedUserGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MatchedUserIds) > 0 {
		for _, s := range m.MatchedUserIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.PartnerHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.PartnerHandle)))
		i += copy(dAtA[i:], *m.PartnerHandle)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublisherExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublisherExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GeoExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Adx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(m.Adx.Size()))
		n12, err := m.Adx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Regions) > 0 {
		for _, s := range m.Regions {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeeswaxAugmented != nil {
		dAtA[i] = 0x8
		i++
		if *m.BeeswaxAugmented {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SegmentExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegulationsExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegulationsExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BidResponseExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidResponseExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SeatBidExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeatBidExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BidExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	n, err := proto.EncodeInternalExtension(m, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TargetingGeoExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetingGeoExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Country != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Country)))
		i += copy(dAtA[i:], *m.Country)
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.City != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Zip != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Zip)))
		i += copy(dAtA[i:], *m.Zip)
	}
	if m.Metro != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(*m.Metro)))
		i += copy(dAtA[i:], *m.Metro)
	}
	if m.LatLongPresent != nil {
		dAtA[i] = 0x30
		i++
		if *m.LatLongPresent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Lat != nil {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Lat))))
		i += 8
	}
	if m.Lon != nil {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Lon))))
		i += 8
	}
	if m.Type != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.Type))
	}
	if len(m.Regions) > 0 {
		for _, s := range m.Regions {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ViewabilityExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewabilityExtensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PredictedViewability != nil {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.PredictedViewability))))
		i += 4
	}
	if m.ExchangePredictedViewRate != nil {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ExchangePredictedViewRate))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdxBidRequestExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdxBidRequestExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsPredictedToBeIgnored != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsPredictedToBeIgnored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimezoneOffset != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.TimezoneOffset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdxDirectDealExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdxDirectDealExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PublisherBlocksOverridden != nil {
		dAtA[i] = 0x8
		i++
		if *m.PublisherBlocksOverridden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdxImpressionExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdxImpressionExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdslotId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.AdslotId))
	}
	if m.ClickThroughRate != nil {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ClickThroughRate))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdxGeoExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdxGeoExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DmaRegionCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.DmaRegionCode))
	}
	if m.HyperlocalSet != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExtension(dAtA, i, uint64(len(m.HyperlocalSet)))
		i += copy(dAtA[i:], m.HyperlocalSet)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AppNexusBidRequestExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppNexusBidRequestExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SellerMemberId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExtension(dAtA, i, uint64(*m.SellerMemberId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExtension(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdvertiserInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.IncludedAdvertisers) > 0 {
		for _, e := range m.IncludedAdvertisers {
			n += 1 + sovExtension(uint64(e))
		}
	}
	if len(m.ExcludedAdvertisers) > 0 {
		for _, e := range m.ExcludedAdvertisers {
			n += 1 + sovExtension(uint64(e))
		}
	}
	if m.Blocked != nil {
		n += 2
	}
	if m.MinimumCpmMicros != nil {
		n += 1 + sovExtension(uint64(*m.MinimumCpmMicros))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dimension) Size() (n int) {
	var l int
	_ = l
	if m.Width != nil {
		n += 1 + sovExtension(uint64(*m.Width))
	}
	if m.Height != nil {
		n += 1 + sovExtension(uint64(*m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BidRequestExtensions) Size() (n int) {
	var l int
	_ = l
	if m.InventorySource != nil {
		n += 1 + sovExtension(uint64(*m.InventorySource))
	}
	if m.AuctionId != nil {
		l = m.AuctionId.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.TargetingGeo != nil {
		l = m.TargetingGeo.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.TimeOfWeek != nil {
		n += 1 + sovExtension(uint64(*m.TimeOfWeek))
	}
	if m.BuzzKey != nil {
		l = len(*m.BuzzKey)
		n += 1 + l + sovExtension(uint64(l))
	}
	if len(m.AugmentorData) > 0 {
		for _, e := range m.AugmentorData {
			l = e.Size()
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.Appnexus != nil {
		l = m.Appnexus.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AuctionidStr != nil {
		l = len(*m.AuctionidStr)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.Adx != nil {
		l = m.Adx.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.ImpTracker != nil {
		n += 1 + sovExtension(uint64(*m.ImpTracker))
	}
	if m.SupplierClickTracker != nil {
		n += 1 + sovExtension(uint64(*m.SupplierClickTracker))
	}
	if m.AdsTxt != nil {
		n += 1 + sovExtension(uint64(*m.AdsTxt))
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BidRequestExtensions_AugmentorData) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovExtension(uint64(l))
	}
	if len(m.Segment) > 0 {
		for _, e := range m.Segment {
			l = e.Size()
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BidRequestExtensions_AugmentorData_Segment) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImpressionExtensions) Size() (n int) {
	var l int
	_ = l
	if m.Adx != nil {
		l = m.Adx.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.PlacementType != nil {
		n += 1 + sovExtension(uint64(*m.PlacementType))
	}
	if m.EnvironmentType != nil {
		n += 1 + sovExtension(uint64(*m.EnvironmentType))
	}
	if len(m.AdvertiserInfo) > 0 {
		for _, e := range m.AdvertiserInfo {
			l = e.Size()
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if len(m.Placements) > 0 {
		for _, s := range m.Placements {
			l = len(s)
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.ExchangePredictedViewRate != nil {
		n += 5
	}
	if len(m.EligibleSeatIds) > 0 {
		for _, s := range m.EligibleSeatIds {
			l = len(s)
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.Viewability != nil {
		l = m.Viewability.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if len(m.AllowedRestrictedCategory) > 0 {
		l = 0
		for _, e := range m.AllowedRestrictedCategory {
			l += sovExtension(uint64(e))
		}
		n += 1 + sovExtension(uint64(l)) + l
	}
	if len(m.AllowedRestrictedCategoryForDeals) > 0 {
		l = 0
		for _, e := range m.AllowedRestrictedCategoryForDeals {
			l += sovExtension(uint64(e))
		}
		n += 1 + sovExtension(uint64(l)) + l
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BannerExtensions) Size() (n int) {
	var l int
	_ = l
	if len(m.Bapis) > 0 {
		for _, e := range m.Bapis {
			n += 1 + sovExtension(uint64(e))
		}
	}
	if len(m.RequiredAttrs) > 0 {
		for _, e := range m.RequiredAttrs {
			n += 1 + sovExtension(uint64(e))
		}
	}
	if len(m.AdditionalDimensions) > 0 {
		for _, e := range m.AdditionalDimensions {
			l = e.Size()
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.Rewarded != nil {
		n += 2
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoExtensions) Size() (n int) {
	var l int
	_ = l
	if m.PlayerSize != nil {
		l = len(*m.PlayerSize)
		n += 1 + l + sovExtension(uint64(l))
	}
	if len(m.RequiredAttrs) > 0 {
		for _, e := range m.RequiredAttrs {
			n += 1 + sovExtension(uint64(e))
		}
	}
	if m.PlacementType != nil {
		n += 1 + sovExtension(uint64(*m.PlacementType))
	}
	if m.SkipOffset != nil {
		n += 1 + sovExtension(uint64(*m.SkipOffset))
	}
	if m.Rewarded != nil {
		n += 2
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PMPExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectDealExtensions) Size() (n int) {
	var l int
	_ = l
	if m.Adx != nil {
		l = m.Adx.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SiteExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContentExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProducerExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceExtensions) Size() (n int) {
	var l int
	_ = l
	if m.AugmentedDeviceScreenSize != nil {
		l = len(*m.AugmentedDeviceScreenSize)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedBrowser != nil {
		l = len(*m.AugmentedBrowser)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedBrowserVersion != nil {
		l = len(*m.AugmentedBrowserVersion)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedOs != nil {
		l = len(*m.AugmentedOs)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedOsv != nil {
		l = len(*m.AugmentedOsv)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedModel != nil {
		l = len(*m.AugmentedModel)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedMake != nil {
		l = len(*m.AugmentedMake)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.AugmentedDevicetype != nil {
		n += 1 + sovExtension(uint64(*m.AugmentedDevicetype))
	}
	if m.AugmentedCarrier != nil {
		l = len(*m.AugmentedCarrier)
		n += 1 + l + sovExtension(uint64(l))
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserExtensions) Size() (n int) {
	var l int
	_ = l
	if m.UserId != nil {
		l = len(*m.UserId)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.UserIdType != nil {
		n += 1 + sovExtension(uint64(*m.UserIdType))
	}
	if m.CookieAge != nil {
		n += 1 + sovExtension(uint64(*m.CookieAge))
	}
	if len(m.MatchedUserGroups) > 0 {
		for _, e := range m.MatchedUserGroups {
			l = e.Size()
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserExtensions_MatchedUserGroups) Size() (n int) {
	var l int
	_ = l
	if len(m.MatchedUserIds) > 0 {
		for _, s := range m.MatchedUserIds {
			l = len(s)
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.PartnerHandle != nil {
		l = len(*m.PartnerHandle)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublisherExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoExtensions) Size() (n int) {
	var l int
	_ = l
	if m.Adx != nil {
		l = m.Adx.Size()
		n += 1 + l + sovExtension(uint64(l))
	}
	if len(m.Regions) > 0 {
		for _, s := range m.Regions {
			l = len(s)
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataExtensions) Size() (n int) {
	var l int
	_ = l
	if m.BeeswaxAugmented != nil {
		n += 2
	}
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegulationsExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BidResponseExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeatBidExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BidExtensions) Size() (n int) {
	var l int
	_ = l
	n += proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TargetingGeoExtension) Size() (n int) {
	var l int
	_ = l
	if m.Country != nil {
		l = len(*m.Country)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.Zip != nil {
		l = len(*m.Zip)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.Metro != nil {
		l = len(*m.Metro)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.LatLongPresent != nil {
		n += 2
	}
	if m.Lat != nil {
		n += 9
	}
	if m.Lon != nil {
		n += 9
	}
	if m.Type != nil {
		n += 1 + sovExtension(uint64(*m.Type))
	}
	if len(m.Regions) > 0 {
		for _, s := range m.Regions {
			l = len(s)
			n += 1 + l + sovExtension(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewabilityExtensions) Size() (n int) {
	var l int
	_ = l
	if m.PredictedViewability != nil {
		n += 5
	}
	if m.ExchangePredictedViewRate != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdxBidRequestExtension) Size() (n int) {
	var l int
	_ = l
	if m.IsPredictedToBeIgnored != nil {
		n += 2
	}
	if m.TimezoneOffset != nil {
		n += 1 + sovExtension(uint64(*m.TimezoneOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdxDirectDealExtension) Size() (n int) {
	var l int
	_ = l
	if m.PublisherBlocksOverridden != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdxImpressionExtension) Size() (n int) {
	var l int
	_ = l
	if m.AdslotId != nil {
		n += 1 + sovExtension(uint64(*m.AdslotId))
	}
	if m.ClickThroughRate != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdxGeoExtension) Size() (n int) {
	var l int
	_ = l
	if m.DmaRegionCode != nil {
		n += 1 + sovExtension(uint64(*m.DmaRegionCode))
	}
	if m.HyperlocalSet != nil {
		l = len(m.HyperlocalSet)
		n += 1 + l + sovExtension(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppNexusBidRequestExtension) Size() (n int) {
	var l int
	_ = l
	if m.SellerMemberId != nil {
		n += 1 + sovExtension(uint64(*m.SellerMemberId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExtension(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExtension(x uint64) (n int) {
	return sovExtension(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdvertiserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IncludedAdvertisers = append(m.IncludedAdvertisers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IncludedAdvertisers = append(m.IncludedAdvertisers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedAdvertisers", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExcludedAdvertisers = append(m.ExcludedAdvertisers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExcludedAdvertisers = append(m.ExcludedAdvertisers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludedAdvertisers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Blocked = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCpmMicros", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinimumCpmMicros = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dimension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidRequestExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidRequestExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidRequestExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventorySource", wireType)
			}
			var v Enums_Inventory_Source
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_Inventory_Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InventorySource = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionId == nil {
				m.AuctionId = &base.EventId{}
			}
			if err := m.AuctionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetingGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetingGeo == nil {
				m.TargetingGeo = &TargetingGeoExtension{}
			}
			if err := m.TargetingGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOfWeek", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeOfWeek = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuzzKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BuzzKey = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AugmentorData = append(m.AugmentorData, &BidRequestExtensions_AugmentorData{})
			if err := m.AugmentorData[len(m.AugmentorData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appnexus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Appnexus == nil {
				m.Appnexus = &AppNexusBidRequestExtension{}
			}
			if err := m.Appnexus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionidStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuctionidStr = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adx == nil {
				m.Adx = &AdxBidRequestExtension{}
			}
			if err := m.Adx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpTracker", wireType)
			}
			var v Enums_Inventory_ImpressionTracker
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_Inventory_ImpressionTracker(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImpTracker = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierClickTracker", wireType)
			}
			var v Enums_Inventory_SupplierClickTracker
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_Inventory_SupplierClickTracker(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupplierClickTracker = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdsTxt", wireType)
			}
			var v BidRequestExtensions_AdsTxtStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (BidRequestExtensions_AdsTxtStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdsTxt = &v
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidRequestExtensions_AugmentorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AugmentorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AugmentorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = append(m.Segment, &BidRequestExtensions_AugmentorData_Segment{})
			if err := m.Segment[len(m.Segment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidRequestExtensions_AugmentorData_Segment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Segment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Segment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpressionExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpressionExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpressionExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adx == nil {
				m.Adx = &AdxImpressionExtension{}
			}
			if err := m.Adx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementType", wireType)
			}
			var v Enums_Inventory_PlacementType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_Inventory_PlacementType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlacementType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentType", wireType)
			}
			var v Enums_Inventory_EnvironmentType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_Inventory_EnvironmentType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnvironmentType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiserInfo = append(m.AdvertiserInfo, &AdvertiserInfo{})
			if err := m.AdvertiserInfo[len(m.AdvertiserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangePredictedViewRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ExchangePredictedViewRate = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleSeatIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleSeatIds = append(m.EligibleSeatIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Viewability == nil {
				m.Viewability = &ViewabilityExtensions{}
			}
			if err := m.Viewability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedRestrictedCategory = append(m.AllowedRestrictedCategory, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedRestrictedCategory = append(m.AllowedRestrictedCategory, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedRestrictedCategory", wireType)
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedRestrictedCategoryForDeals = append(m.AllowedRestrictedCategoryForDeals, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedRestrictedCategoryForDeals = append(m.AllowedRestrictedCategoryForDeals, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedRestrictedCategoryForDeals", wireType)
			}
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Enums_BidRequest_Impression_ApiFramework
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Enums_BidRequest_Impression_ApiFramework(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bapis = append(m.Bapis, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Enums_BidRequest_Impression_ApiFramework
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Enums_BidRequest_Impression_ApiFramework(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bapis = append(m.Bapis, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bapis", wireType)
			}
		case 2:
			if wireType == 0 {
				var v CreativeAttribute
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (CreativeAttribute(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequiredAttrs = append(m.RequiredAttrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v CreativeAttribute
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (CreativeAttribute(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequiredAttrs = append(m.RequiredAttrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAttrs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalDimensions = append(m.AdditionalDimensions, &Dimension{})
			if err := m.AdditionalDimensions[len(m.AdditionalDimensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewarded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Rewarded = &b
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerSize = &s
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v CreativeAttribute
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (CreativeAttribute(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequiredAttrs = append(m.RequiredAttrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExtension
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v CreativeAttribute
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (CreativeAttribute(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequiredAttrs = append(m.RequiredAttrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAttrs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementType", wireType)
			}
			var v VideoExtensions_PlacementType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (VideoExtensions_PlacementType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlacementType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipOffset", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipOffset = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewarded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Rewarded = &b
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PMPExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PMPExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PMPExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectDealExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectDealExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectDealExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adx == nil {
				m.Adx = &AdxDirectDealExtension{}
			}
			if err := m.Adx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProducerExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProducerExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProducerExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedDeviceScreenSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedDeviceScreenSize = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedBrowser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedBrowser = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedBrowserVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedBrowserVersion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedOs = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedOsv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedOsv = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedModel = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedMake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedMake = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedDevicetype", wireType)
			}
			var v Enums_BidRequest_Device_DeviceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_BidRequest_Device_DeviceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AugmentedDevicetype = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AugmentedCarrier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AugmentedCarrier = &s
			iNdEx = postIndex
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdType", wireType)
			}
			var v Enums_BidRequest_User_UserIdType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_BidRequest_User_UserIdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserIdType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieAge", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CookieAge = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedUserGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedUserGroups = append(m.MatchedUserGroups, &UserExtensions_MatchedUserGroups{})
			if err := m.MatchedUserGroups[len(m.MatchedUserGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExtensions_MatchedUserGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchedUserGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchedUserGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedUserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedUserIds = append(m.MatchedUserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartnerHandle = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublisherExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublisherExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublisherExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adx == nil {
				m.Adx = &AdxGeoExtension{}
			}
			if err := m.Adx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeeswaxAugmented", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.BeeswaxAugmented = &b
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegulationsExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegulationsExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegulationsExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidResponseExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidResponseExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidResponseExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeatBidExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeatBidExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeatBidExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1000) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExtension(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthExtension
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetingGeoExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetingGeoExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetingGeoExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Zip = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Metro = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatLongPresent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.LatLongPresent = &b
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Lat = &v2
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Lon = &v2
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Enums_BidRequest_Geo_LocationType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Enums_BidRequest_Geo_LocationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewabilityExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewabilityExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewabilityExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictedViewability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.PredictedViewability = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangePredictedViewRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ExchangePredictedViewRate = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdxBidRequestExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdxBidRequestExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdxBidRequestExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPredictedToBeIgnored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPredictedToBeIgnored = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimezoneOffset", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimezoneOffset = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdxDirectDealExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdxDirectDealExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdxDirectDealExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherBlocksOverridden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PublisherBlocksOverridden = &b
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdxImpressionExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdxImpressionExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdxImpressionExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdslotId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdslotId = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickThroughRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ClickThroughRate = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdxGeoExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdxGeoExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdxGeoExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmaRegionCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DmaRegionCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperlocalSet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtension
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyperlocalSet = append(m.HyperlocalSet[:0], dAtA[iNdEx:postIndex]...)
			if m.HyperlocalSet == nil {
				m.HyperlocalSet = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppNexusBidRequestExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppNexusBidRequestExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppNexusBidRequestExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerMemberId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerMemberId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtension(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtension
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExtension
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExtension
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExtension(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExtension = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtension   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("beeswax/openrtb/extension.proto", fileDescriptorExtension) }

var fileDescriptorExtension = []byte{
	// 2269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x72, 0x1b, 0xc7,
	0xd5, 0x36, 0x00, 0x81, 0x20, 0x0e, 0x09, 0x10, 0x6c, 0x52, 0x12, 0x48, 0xfd, 0x96, 0x68, 0xfc,
	0xbe, 0xd0, 0x92, 0x0d, 0x52, 0x74, 0x65, 0x11, 0x2e, 0x1c, 0x83, 0x24, 0x4c, 0x23, 0x22, 0x41,
	0x56, 0x03, 0x92, 0x9d, 0x55, 0xbb, 0x31, 0x73, 0x08, 0x76, 0x71, 0x66, 0x7a, 0xdc, 0xd3, 0xe0,
	0x45, 0x55, 0xa9, 0xd2, 0x0b, 0x24, 0x55, 0x79, 0x82, 0x2c, 0xf3, 0x16, 0xd9, 0x64, 0x93, 0xec,
	0x52, 0x79, 0x82, 0x44, 0xab, 0x54, 0x5e, 0x22, 0xa9, 0xe9, 0xb9, 0x60, 0x00, 0x01, 0x4e, 0x52,
	0x15, 0x2d, 0x44, 0xf4, 0x77, 0x6e, 0x3d, 0xa7, 0x4f, 0x7f, 0xe7, 0xcc, 0xc0, 0x93, 0x01, 0x62,
	0x70, 0xc3, 0x6f, 0x77, 0xa4, 0x8f, 0x9e, 0xd2, 0x83, 0x1d, 0xbc, 0xd5, 0xe8, 0x05, 0x42, 0x7a,
	0x4d, 0x5f, 0x49, 0x2d, 0x49, 0x29, 0x16, 0x6c, 0x6e, 0x26, 0x9a, 0x03, 0x1e, 0xe0, 0x0e, 0x5e,
	0xa3, 0xa7, 0x85, 0x1d, 0x29, 0x6d, 0x7e, 0x38, 0xed, 0x25, 0xfe, 0xcb, 0x2c, 0xe9, 0xba, 0x89,
	0xab, 0xc6, 0xef, 0x73, 0x50, 0x6d, 0xd9, 0xd7, 0xa8, 0xb4, 0x08, 0x50, 0x75, 0xbc, 0x0b, 0x49,
	0x9e, 0xc3, 0xba, 0xf0, 0x2c, 0x67, 0x64, 0xa3, 0xcd, 0x78, 0x2a, 0x0a, 0xea, 0xb9, 0xad, 0xc2,
	0x76, 0x81, 0xae, 0x25, 0xb2, 0xb1, 0x55, 0x10, 0x9a, 0xe0, 0xed, 0x0c, 0x93, 0x7c, 0x64, 0x92,
	0xc8, 0xb2, 0x26, 0x75, 0x28, 0x0d, 0x1c, 0x69, 0x5d, 0xa1, 0x5d, 0x2f, 0x6c, 0xe5, 0xb6, 0x17,
	0x69, 0xb2, 0x24, 0x9f, 0x01, 0x71, 0x85, 0x27, 0xdc, 0x91, 0xcb, 0x2c, 0xdf, 0x65, 0xae, 0xb0,
	0x94, 0x0c, 0xea, 0xf7, 0xb6, 0x72, 0xdb, 0x05, 0x5a, 0x8b, 0x25, 0x87, 0xbe, 0x7b, 0x6a, 0xf0,
	0xc6, 0x4f, 0xa1, 0x7c, 0x24, 0xdc, 0x28, 0x3d, 0x64, 0x1d, 0x8a, 0x37, 0xc2, 0xd6, 0x97, 0xf5,
	0xdc, 0x56, 0x6e, 0xbb, 0x48, 0xa3, 0x05, 0x79, 0x00, 0x0b, 0x97, 0x28, 0x86, 0x97, 0xba, 0x9e,
	0x37, 0x70, 0xbc, 0x6a, 0xfc, 0x63, 0x11, 0xd6, 0x0f, 0x84, 0x4d, 0xf1, 0x87, 0x11, 0x06, 0xba,
	0x9d, 0x24, 0x39, 0x20, 0x3f, 0x87, 0x9a, 0xf0, 0xc2, 0x64, 0x4a, 0x75, 0xc7, 0x02, 0x39, 0x52,
	0x16, 0x1a, 0x8f, 0xd5, 0xbd, 0x27, 0xcd, 0x38, 0x8b, 0xcd, 0xb6, 0x37, 0x72, 0x83, 0x66, 0x27,
	0x51, 0x6b, 0xf6, 0x8c, 0x1a, 0x5d, 0x49, 0x0d, 0x23, 0x80, 0x7c, 0x06, 0xc0, 0x47, 0x96, 0x16,
	0xd2, 0x63, 0xc2, 0x36, 0x1b, 0x58, 0xda, 0xab, 0x34, 0xc3, 0xf3, 0x6a, 0xb6, 0x43, 0xcd, 0x8e,
	0x4d, 0xcb, 0xb1, 0x42, 0xc7, 0x26, 0x87, 0x50, 0xd1, 0x5c, 0x0d, 0x51, 0x0b, 0x6f, 0xc8, 0x86,
	0x28, 0x4d, 0x6e, 0x96, 0xf6, 0x1e, 0xa7, 0x61, 0xfb, 0x89, 0xf4, 0x18, 0x65, 0xba, 0x63, 0xba,
	0xac, 0x33, 0x30, 0xd9, 0x82, 0x65, 0x2d, 0x5c, 0x64, 0xf2, 0x82, 0xdd, 0x20, 0x5e, 0x99, 0xd4,
	0x15, 0x29, 0x84, 0xd8, 0xd9, 0xc5, 0xb7, 0x88, 0x57, 0x64, 0x03, 0x16, 0x07, 0xa3, 0xd7, 0xaf,
	0xd9, 0x15, 0xde, 0xd5, 0x8b, 0x5b, 0xb9, 0xed, 0x32, 0x2d, 0x85, 0xeb, 0x17, 0x78, 0x47, 0x28,
	0x54, 0xf9, 0x68, 0xe8, 0x9a, 0x67, 0x60, 0x36, 0xd7, 0xbc, 0xbe, 0xb0, 0x55, 0xd8, 0x5e, 0xda,
	0x7b, 0x96, 0x6e, 0x61, 0x56, 0xca, 0x9a, 0xad, 0xc4, 0xe6, 0x88, 0x6b, 0x4e, 0x2b, 0x3c, 0xbb,
	0x24, 0x5f, 0xc1, 0x22, 0xf7, 0x7d, 0x0f, 0x6f, 0x47, 0x41, 0xbd, 0x64, 0x1e, 0xe8, 0xc3, 0xd4,
	0x5b, 0xcb, 0xf7, 0xbb, 0xa1, 0x60, 0x86, 0x57, 0x9a, 0x5a, 0x91, 0xff, 0x87, 0x4a, 0x9c, 0x24,
	0x61, 0xb3, 0x40, 0xab, 0xfa, 0xa2, 0xd9, 0xf5, 0x72, 0x0a, 0xf6, 0xb4, 0x22, 0xcf, 0xa1, 0xc0,
	0xed, 0xdb, 0x7a, 0xd9, 0x44, 0x18, 0x9f, 0x54, 0xcb, 0xbe, 0x9d, 0xe5, 0x3c, 0xd4, 0x25, 0x2f,
	0x60, 0x49, 0xb8, 0x3e, 0xd3, 0x8a, 0x5b, 0x57, 0xa8, 0xea, 0x60, 0x0e, 0xf9, 0xe9, 0xdc, 0x43,
	0xee, 0xb8, 0xbe, 0xc2, 0x20, 0x34, 0xef, 0x47, 0x16, 0x14, 0x84, 0xeb, 0xc7, 0xbf, 0x89, 0x05,
	0x0f, 0x82, 0x91, 0xef, 0x3b, 0x02, 0x15, 0xb3, 0x1c, 0x61, 0x5d, 0xa5, 0x7e, 0x97, 0x8c, 0xdf,
	0xcf, 0xe7, 0x17, 0x4f, 0x6c, 0x76, 0x18, 0x5a, 0x25, 0xae, 0xd7, 0x83, 0x19, 0x28, 0x39, 0x84,
	0x12, 0xb7, 0x03, 0xa6, 0x6f, 0x75, 0x7d, 0x79, 0x6a, 0xb7, 0xb3, 0x0f, 0xc6, 0x0e, 0xfa, 0xb7,
	0xba, 0xa7, 0xb9, 0x1e, 0x05, 0x74, 0x81, 0x9b, 0xd5, 0xe6, 0x6f, 0x73, 0x50, 0x99, 0x38, 0x31,
	0x52, 0x85, 0xbc, 0xb0, 0x4d, 0x91, 0x97, 0x69, 0x5e, 0xd8, 0xe4, 0x14, 0x4a, 0x01, 0x1a, 0x05,
	0x73, 0x89, 0x97, 0xf6, 0xbe, 0xf8, 0x2f, 0xce, 0xbf, 0xd9, 0x8b, 0x4c, 0x69, 0xe2, 0x63, 0x73,
	0x07, 0x4a, 0x31, 0xf6, 0x4e, 0xa4, 0x75, 0x28, 0x5e, 0x73, 0x67, 0x84, 0xe6, 0x6e, 0x94, 0x69,
	0xb4, 0x68, 0xfc, 0x21, 0x07, 0xcb, 0xd9, 0xad, 0x93, 0x75, 0x28, 0xbd, 0xec, 0xbe, 0xe8, 0x9e,
	0x7d, 0xdb, 0xad, 0xfd, 0x33, 0xf9, 0x97, 0x23, 0x15, 0x28, 0x77, 0xcf, 0xd8, 0xd1, 0xd9, 0x69,
	0xab, 0xd3, 0xad, 0xbd, 0x47, 0xd6, 0x60, 0xa5, 0x7b, 0xc6, 0x5a, 0x47, 0x3d, 0xd6, 0xff, 0xae,
	0xcf, 0xbe, 0xee, 0x9c, 0xb4, 0x6b, 0x39, 0xf2, 0x10, 0xd6, 0x12, 0xa4, 0x7b, 0xd6, 0x67, 0xbd,
	0xc3, 0x56, 0xb7, 0xdb, 0x3e, 0xaa, 0xe5, 0xc9, 0x26, 0x3c, 0x30, 0xda, 0xaf, 0xda, 0xb4, 0xdf,
	0xe9, 0x75, 0xba, 0xc7, 0xac, 0x75, 0x72, 0x72, 0xf6, 0x6d, 0xfb, 0xa8, 0x56, 0x20, 0x04, 0xaa,
	0xa7, 0x9d, 0x9e, 0x01, 0xcf, 0x5f, 0x1e, 0xb0, 0xce, 0x51, 0xed, 0x1e, 0x59, 0x86, 0xc5, 0xd0,
	0x41, 0xeb, 0x65, 0xff, 0x9b, 0x5a, 0x91, 0xac, 0x42, 0x25, 0xfc, 0xc5, 0x68, 0xbb, 0xd7, 0x3e,
	0x39, 0x69, 0xd3, 0xda, 0x02, 0x59, 0x81, 0x25, 0x03, 0x1d, 0x75, 0x68, 0xfb, 0xb0, 0x5f, 0x2b,
	0x3d, 0x2d, 0x2f, 0xfe, 0xbd, 0x54, 0x7b, 0xf3, 0xe6, 0xcd, 0x9b, 0x7c, 0xe3, 0x77, 0x45, 0x58,
	0x1f, 0x97, 0x4f, 0x86, 0x6c, 0xe2, 0xaa, 0xcd, 0xbd, 0x5b, 0xb5, 0x33, 0xd4, 0xa3, 0xaa, 0x3d,
	0x85, 0xaa, 0xef, 0x70, 0x0b, 0xc3, 0x7c, 0x32, 0x7d, 0xe7, 0x47, 0xb9, 0xab, 0xee, 0x7d, 0x3c,
	0xb7, 0xc0, 0xce, 0x13, 0xf5, 0xfe, 0x9d, 0x8f, 0xb4, 0xe2, 0x67, 0x97, 0xa4, 0x07, 0x35, 0xf4,
	0xae, 0x85, 0x92, 0xde, 0xd8, 0x61, 0xc1, 0x38, 0xdc, 0x9e, 0xeb, 0xb0, 0x3d, 0x36, 0x30, 0x2e,
	0x57, 0x70, 0x12, 0x20, 0x5f, 0xc1, 0xca, 0xb8, 0x13, 0x30, 0xe1, 0x5d, 0xc8, 0xfa, 0x3d, 0x53,
	0x48, 0x0f, 0x33, 0x8f, 0x98, 0xed, 0x3b, 0xb4, 0xca, 0x27, 0xfb, 0xd0, 0x63, 0x80, 0x74, 0x9f,
	0x41, 0xbd, 0xb8, 0x55, 0xd8, 0x2e, 0xd3, 0x0c, 0x42, 0x0e, 0xe1, 0xff, 0xf0, 0xd6, 0xba, 0xe4,
	0xde, 0x10, 0x99, 0xaf, 0xd0, 0x16, 0x96, 0x46, 0x9b, 0x5d, 0x0b, 0xbc, 0x61, 0x8a, 0x6b, 0xac,
	0x2f, 0x6c, 0xe5, 0xb6, 0xf3, 0x07, 0xf9, 0x7a, 0x8e, 0x6e, 0x24, 0x7a, 0xe7, 0x89, 0xda, 0x2b,
	0x81, 0x37, 0x94, 0x6b, 0x24, 0x4f, 0x61, 0x15, 0x1d, 0x31, 0x14, 0x03, 0x07, 0x59, 0x80, 0x5c,
	0x33, 0x61, 0x87, 0x1c, 0x15, 0xc6, 0x5a, 0x49, 0x04, 0x3d, 0xe4, 0xba, 0x63, 0x07, 0xe4, 0x2b,
	0x58, 0x0a, 0xbd, 0xf3, 0x81, 0x70, 0x84, 0xbe, 0x33, 0x14, 0x94, 0xa5, 0xe6, 0x57, 0x63, 0xd9,
	0xf8, 0x78, 0x69, 0xd6, 0x84, 0x1c, 0xc0, 0x23, 0xee, 0x38, 0xf2, 0x06, 0x6d, 0xa6, 0x30, 0xd0,
	0x2a, 0xda, 0xb2, 0xc5, 0x35, 0x0e, 0xa5, 0xba, 0xab, 0x97, 0xb7, 0x0a, 0xdb, 0xc5, 0x83, 0x7c,
	0x2d, 0x47, 0x37, 0x62, 0x35, 0x9a, 0x6a, 0x1d, 0xc6, 0x4a, 0xa4, 0x0f, 0x1f, 0xfd, 0x88, 0x0f,
	0x76, 0x11, 0xd2, 0x36, 0x72, 0x27, 0xa8, 0x43, 0xea, 0xed, 0x83, 0xb9, 0xde, 0xbe, 0x96, 0xea,
	0x28, 0x54, 0xce, 0x56, 0xea, 0xaf, 0xf3, 0x50, 0x3b, 0xe0, 0x9e, 0x87, 0x2a, 0x53, 0xa5, 0xc7,
	0x50, 0x1c, 0x70, 0x5f, 0x44, 0x53, 0x40, 0x75, 0xef, 0xf9, 0x54, 0x61, 0x8c, 0x39, 0x21, 0xc3,
	0x91, 0xcd, 0x96, 0x2f, 0xbe, 0x56, 0xdc, 0xc5, 0x1b, 0xa9, 0xae, 0x68, 0x64, 0x4f, 0x5a, 0x50,
	0x55, 0xf8, 0xc3, 0x48, 0xa8, 0x70, 0x54, 0xd0, 0x3a, 0x1e, 0x12, 0xaa, 0x7b, 0x9b, 0xa9, 0xc7,
	0x43, 0x85, 0x5c, 0x8b, 0x6b, 0x6c, 0x69, 0xad, 0xc4, 0x60, 0xa4, 0x91, 0x56, 0x12, 0x8b, 0x10,
	0x0a, 0xf7, 0x72, 0x9f, 0xdb, 0xb6, 0x08, 0x89, 0x9f, 0x3b, 0xcc, 0x4e, 0xba, 0x7f, 0x50, 0x2f,
	0x98, 0x02, 0x23, 0xa9, 0xa7, 0x74, 0x30, 0xa0, 0xeb, 0x63, 0x83, 0x14, 0x0c, 0xc8, 0x26, 0x2c,
	0x2a, 0xbc, 0xe1, 0xca, 0x46, 0xdb, 0x34, 0xc9, 0x45, 0x9a, 0xae, 0xb3, 0x09, 0xf9, 0x53, 0x1e,
	0x56, 0x5e, 0x09, 0x3b, 0xd3, 0x70, 0x03, 0xf2, 0x04, 0x96, 0x7c, 0x87, 0xdf, 0xa1, 0x62, 0x81,
	0x78, 0x8d, 0x31, 0x9d, 0x41, 0x04, 0xf5, 0xc4, 0x6b, 0xfc, 0x5f, 0x3c, 0xe7, 0x77, 0xef, 0x5c,
	0xf3, 0xc2, 0xd4, 0x35, 0x9f, 0xda, 0xd5, 0xe4, 0x35, 0xdf, 0x2f, 0x77, 0xba, 0xac, 0xd7, 0xa7,
	0xed, 0xd6, 0xe9, 0xf4, 0x8d, 0x6f, 0xc0, 0x52, 0x70, 0x25, 0x7c, 0x26, 0x2f, 0x2e, 0x02, 0xd4,
	0xd1, 0x80, 0xb0, 0x9f, 0xfb, 0x09, 0x85, 0x10, 0x3d, 0x33, 0xe0, 0x44, 0x72, 0x8a, 0x93, 0xc9,
	0x69, 0x7c, 0x0e, 0x95, 0x89, 0x50, 0x21, 0x0f, 0x77, 0xba, 0xec, 0x20, 0x64, 0x56, 0x5a, 0x7b,
	0x2f, 0x5e, 0x46, 0xb1, 0x6b, 0xb9, 0x6c, 0x2e, 0xdf, 0x87, 0x5a, 0xd7, 0x3c, 0xf5, 0x78, 0xd7,
	0x59, 0xf1, 0x26, 0x54, 0xce, 0x4f, 0xcf, 0x67, 0xcb, 0xfa, 0xb0, 0x7e, 0x24, 0x14, 0x5a, 0x3a,
	0xac, 0xd8, 0xff, 0x88, 0x40, 0x67, 0xa8, 0x1b, 0x02, 0xcd, 0x7a, 0x7d, 0x04, 0xd5, 0x9e, 0xd0,
	0xf3, 0xb7, 0xd3, 0xf2, 0xfd, 0xd9, 0xb2, 0xc7, 0xb0, 0x7a, 0x28, 0x3d, 0x8d, 0x9e, 0x9e, 0x2d,
	0x7f, 0x02, 0xe4, 0x5c, 0x49, 0x7b, 0x64, 0x65, 0xef, 0x51, 0x56, 0xe1, 0x37, 0xf7, 0xa0, 0x76,
	0x84, 0xd7, 0xc2, 0xca, 0x04, 0x0f, 0x49, 0x2d, 0x9e, 0x9d, 0xd0, 0x66, 0xb6, 0x91, 0xb2, 0xc0,
	0x52, 0x88, 0x5e, 0x54, 0x68, 0xa6, 0x49, 0xee, 0xe7, 0xbb, 0x2d, 0xba, 0x91, 0xea, 0x45, 0x4e,
	0x7a, 0x46, 0xcb, 0xd4, 0xde, 0x0e, 0xac, 0x8e, 0x9d, 0x0c, 0x94, 0xbc, 0x09, 0x50, 0x99, 0xda,
	0x29, 0xef, 0xe7, 0x3f, 0x7f, 0x4e, 0x6b, 0xa9, 0xf0, 0x20, 0x92, 0x91, 0x2f, 0x61, 0xe3, 0x1d,
	0x03, 0x76, 0x8d, 0x2a, 0xdc, 0x93, 0xa9, 0x8e, 0xc8, 0xf0, 0xe1, 0xb4, 0xe1, 0xab, 0x48, 0x85,
	0x7c, 0x04, 0xcb, 0x63, 0x7b, 0x19, 0x44, 0x33, 0xa5, 0x31, 0x59, 0x4a, 0xf1, 0xb3, 0x80, 0x7c,
	0x02, 0x95, 0xac, 0xda, 0xb5, 0xa1, 0xe8, 0x48, 0x6f, 0x39, 0xa3, 0x77, 0x4d, 0x9e, 0xc1, 0xca,
	0x58, 0xd1, 0x95, 0x36, 0x3a, 0x66, 0x6e, 0x8c, 0x54, 0xab, 0xa9, 0xe8, 0x34, 0x94, 0x90, 0x4f,
	0xa1, 0x9a, 0x51, 0xe6, 0x57, 0x18, 0x0d, 0x87, 0x46, 0x77, 0x1c, 0xef, 0x94, 0x5f, 0x21, 0x19,
	0xc2, 0xfa, 0x74, 0x76, 0xcd, 0xbd, 0x2a, 0x9b, 0x7b, 0xf5, 0x6c, 0x3e, 0xa9, 0x45, 0x29, 0x8e,
	0xff, 0x98, 0xcb, 0x95, 0x4c, 0x23, 0x74, 0x6d, 0xea, 0x1c, 0x42, 0x87, 0xe4, 0x59, 0xf6, 0x04,
	0x2c, 0xae, 0x94, 0x88, 0xa7, 0xcb, 0x72, 0x26, 0xfb, 0x87, 0x11, 0x9e, 0xad, 0x89, 0xbf, 0xe5,
	0xa1, 0xfa, 0x32, 0x98, 0x60, 0xde, 0x87, 0x50, 0x1a, 0x99, 0x16, 0x9a, 0x0c, 0x4d, 0x0b, 0xe1,
	0xb2, 0x63, 0x93, 0x17, 0xb0, 0x1c, 0x0b, 0xb2, 0x33, 0xc0, 0xa7, 0xf3, 0x1f, 0x22, 0x74, 0x6c,
	0xfe, 0xeb, 0xd8, 0xa6, 0x67, 0xc3, 0x28, 0xfd, 0x4d, 0xde, 0x07, 0xb0, 0xa4, 0xbc, 0x12, 0xc8,
	0xf8, 0x30, 0xe2, 0x99, 0x22, 0x2d, 0x47, 0x48, 0x6b, 0x88, 0xe4, 0x17, 0xb0, 0xe6, 0x72, 0x6d,
	0x5d, 0xa2, 0xcd, 0x4c, 0xcc, 0xa1, 0x92, 0x23, 0x3f, 0x88, 0x3b, 0xfa, 0x38, 0xe4, 0xe4, 0xd6,
	0x9b, 0xa7, 0x91, 0x49, 0x88, 0x1e, 0x1b, 0x03, 0xba, 0xea, 0x4e, 0x43, 0x9b, 0x36, 0xac, 0xbe,
	0xa3, 0x47, 0xb6, 0xa1, 0x36, 0x11, 0x2f, 0xec, 0xca, 0x39, 0xd3, 0x95, 0xab, 0x19, 0x0f, 0x61,
	0x53, 0xfe, 0x08, 0xaa, 0x3e, 0x57, 0xda, 0x43, 0xc5, 0x2e, 0xb9, 0x67, 0x3b, 0xc9, 0x1c, 0x59,
	0x89, 0xd1, 0x6f, 0x0c, 0x98, 0xcd, 0xf1, 0x16, 0xac, 0x9d, 0x8f, 0x06, 0x8e, 0x08, 0x2e, 0xe7,
	0xdd, 0xcc, 0xef, 0xa1, 0x72, 0x3c, 0xc1, 0xf6, 0x4f, 0xb3, 0x14, 0x53, 0xcf, 0x52, 0xcc, 0xc4,
	0x6b, 0x98, 0x19, 0xce, 0xea, 0x50, 0x52, 0x38, 0x34, 0xfd, 0x28, 0x6f, 0x76, 0x9c, 0x2c, 0xb3,
	0x11, 0xce, 0xa0, 0x1a, 0x0e, 0xca, 0x99, 0x10, 0x7b, 0xb0, 0x1a, 0xbf, 0xb0, 0xb3, 0xb4, 0x40,
	0x4c, 0xc0, 0xc5, 0xfd, 0xe2, 0x05, 0x77, 0x02, 0xa4, 0xb5, 0x58, 0xde, 0x4a, 0xc4, 0x53, 0x6c,
	0x14, 0x0f, 0xd8, 0xb3, 0x1f, 0xa9, 0x01, 0xf7, 0x29, 0x0e, 0x47, 0x0e, 0x0f, 0x9b, 0x60, 0x30,
	0x57, 0xc7, 0x54, 0x4b, 0xe0, 0x4b, 0x2f, 0xc0, 0xb9, 0xac, 0x17, 0x8e, 0x43, 0x07, 0xc2, 0x9e,
	0xcb, 0x98, 0x73, 0x65, 0x7f, 0xc9, 0xc3, 0xfd, 0x99, 0xef, 0xaf, 0xe4, 0x7d, 0x28, 0x59, 0x72,
	0xe4, 0x69, 0x75, 0x17, 0xd5, 0xf8, 0x7e, 0x61, 0x77, 0x77, 0x97, 0x26, 0x18, 0x69, 0xc0, 0x42,
	0x94, 0xc3, 0x98, 0xfe, 0x16, 0x76, 0x77, 0x77, 0x77, 0x76, 0x77, 0xcd, 0x6c, 0x17, 0x4b, 0xc8,
	0x03, 0xb8, 0x67, 0x85, 0x53, 0xd9, 0x98, 0xe6, 0xcc, 0x9a, 0xac, 0x43, 0xe1, 0xb5, 0xf0, 0x33,
	0x24, 0x16, 0x2e, 0xc9, 0x06, 0x14, 0x5d, 0xd4, 0x4a, 0xc6, 0x4c, 0x65, 0xc2, 0x45, 0x08, 0xd9,
	0x81, 0x9a, 0xc3, 0x35, 0x73, 0xa4, 0x37, 0x0c, 0xc7, 0xca, 0x20, 0x7c, 0x05, 0x5a, 0xc8, 0x9e,
	0x43, 0xd5, 0xe1, 0xfa, 0x44, 0x7a, 0xc3, 0xf3, 0x48, 0x48, 0x6a, 0x50, 0x70, 0xb8, 0x36, 0x04,
	0x95, 0xa3, 0xe1, 0x4f, 0x83, 0x48, 0xcf, 0xd0, 0x50, 0x88, 0x48, 0x8f, 0x7c, 0x09, 0xf7, 0x32,
	0x44, 0xf3, 0x74, 0xfe, 0x1d, 0x3d, 0x46, 0xd9, 0x3c, 0x91, 0x96, 0x39, 0x26, 0x73, 0x49, 0x8d,
	0x5d, 0xb6, 0xa8, 0x60, 0xa2, 0xa8, 0x1a, 0xbf, 0xca, 0xc1, 0xfd, 0x99, 0x93, 0x27, 0xf9, 0x02,
	0xee, 0x4f, 0x8e, 0xc5, 0xc9, 0xe0, 0x1a, 0xa6, 0x38, 0x4f, 0xd7, 0xfd, 0xec, 0x30, 0x9c, 0x4c,
	0xa8, 0x3f, 0xfb, 0x37, 0x43, 0x75, 0xde, 0xd8, 0xce, 0x1f, 0xa8, 0x1b, 0xbf, 0x84, 0x07, 0xb3,
	0x5f, 0xb8, 0xc9, 0x3e, 0x6c, 0x8a, 0x20, 0xe3, 0x54, 0x4b, 0x36, 0x40, 0x26, 0x86, 0x9e, 0x54,
	0x49, 0xa9, 0xd3, 0x07, 0x22, 0x48, 0x5d, 0xf6, 0xe5, 0x01, 0x76, 0x22, 0x29, 0xf9, 0x04, 0x56,
	0xb4, 0x70, 0xf1, 0xb5, 0xf4, 0x30, 0x19, 0x5a, 0xa2, 0x6f, 0x39, 0xd5, 0x04, 0x8e, 0xa6, 0x96,
	0x06, 0x33, 0xe1, 0x67, 0x34, 0x7e, 0xd2, 0x86, 0x47, 0x7e, 0x72, 0xed, 0x99, 0xf9, 0xd6, 0x14,
	0x30, 0x79, 0x8d, 0x4a, 0x09, 0xdb, 0x46, 0x6f, 0xf2, 0xaa, 0x6d, 0xa4, 0x9a, 0x07, 0x46, 0xf1,
	0x2c, 0xd5, 0x6b, 0x0c, 0x4d, 0x80, 0x19, 0xaf, 0x66, 0xe4, 0x11, 0x94, 0xb9, 0x1d, 0x38, 0x52,
	0x27, 0x54, 0x5d, 0xa4, 0x8b, 0x11, 0xd0, 0xb1, 0xc9, 0x2e, 0x90, 0xf8, 0x93, 0xc0, 0xa5, 0x92,
	0xa3, 0xe1, 0x65, 0x26, 0x9b, 0x51, 0x4f, 0x36, 0xd2, 0x7e, 0x24, 0x34, 0x89, 0xfc, 0x1e, 0x56,
	0xa6, 0xf8, 0x85, 0x7c, 0x0c, 0x2b, 0xb6, 0xcb, 0x59, 0x74, 0xf4, 0xcc, 0x92, 0x36, 0xc6, 0x71,
	0x2a, 0xb6, 0xcb, 0xa9, 0x41, 0x0f, 0xa5, 0x8d, 0x21, 0x27, 0x5e, 0xde, 0xf9, 0xa8, 0x1c, 0x69,
	0x71, 0x87, 0x25, 0xc9, 0x5a, 0xa6, 0x95, 0x31, 0xda, 0x43, 0xdd, 0x38, 0x86, 0x47, 0x3f, 0xf2,
	0xf5, 0x25, 0xe4, 0xe0, 0x00, 0x1d, 0x07, 0x15, 0x73, 0xd1, 0x1d, 0x8c, 0x3b, 0x50, 0x91, 0x56,
	0x23, 0xfc, 0xd4, 0xc0, 0x1d, 0xfb, 0xe0, 0x83, 0x3f, 0xbe, 0x7d, 0x9c, 0xfb, 0xf3, 0xdb, 0xc7,
	0xb9, 0xbf, 0xbe, 0x7d, 0x9c, 0x83, 0x35, 0x4b, 0xba, 0xcd, 0x98, 0xab, 0x92, 0x42, 0xff, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x41, 0xe2, 0x67, 0xd4, 0x14, 0x00, 0x00,
}
